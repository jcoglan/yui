{"majorversion": 3, "classmap": {"NodeList": {"name": "NodeList", "constructors": [{"description": "A wrapper for manipulating multiple DOM elements"}], "namespace": "", "module": "node", "guessedname": "NodeList", "methods": {"set": {"description": "Set the value of the property\/attribute on all HTMLElements bound to this NodeList.\nOnly strings\/numbers\/booleans are passed through unless a SETTER exists.", "chainable": "", "see": "Node", "params": [{"type": "String", "name": "prop", "description": " Property to set"}, {"type": "any", "name": "val", "description": " Value to apply to the given property"}], "guessedname": "set", "guessedtype": "function"}, "get": {"return": {"type": "Array", "description": "Array containing the current values mapped to the Node indexes"}, "description": "Get the value of the property\/attribute for each of the HTMLElements bound to this NodeList.\nOnly strings\/numbers\/booleans are passed through unless a GETTER exists.", "see": "Node", "params": [{"type": "String", "name": "prop", "description": " Property to get"}], "guessedname": "get", "guessedtype": "function"}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "description": "Retrieves the Node instance at the given index.", "guessedname": "item", "guessedtype": "function"}, "each": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Applies the given function to each Node in the NodeList.", "chainable": "", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the NodeList instance"}], "guessedname": "each", "guessedtype": "function"}, "size": {"return": {"type": "Int", "description": "The number of items in the NodeList."}, "description": "Returns the current number of items in the NodeList.", "guessedname": "size", "guessedtype": "function"}}, "extends": "Node", "superclass": "Node", "file": "node.js", "guessedtype": "function", "shortname": "NodeList", "description": "A wrapper for manipulating multiple DOM elements"}, "UA": {"name": "UA", "namespace": "", "module": "yui", "guessedname": "UA", "static": "", "file": "yui-ua.js", "guessedtype": "function", "shortname": "UA", "properties": {"opera": {"type": "float", "static": "", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "gecko": {"type": "float", "static": "", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>", "guessedname": "gecko", "guessedtype": "property"}, "ie": {"type": "float", "static": "", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "webkit": {"type": "float", "static": "", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\n<\/pre>\nhttp:\/\/developer.apple.com\/internet\/safari\/uamatrix.html", "guessedname": "webkit", "guessedtype": "property"}, "mobile": {"type": "string", "static": "", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}}, "description": "Browser\/platform detection"}, "DOM": {"name": "DOM", "description": "Provides DOM helper methods.", "namespace": "", "module": "dom", "guessedname": "NODE_TYPE", "file": "dom.js", "guessedtype": "property", "shortname": "DOM", "methods": {"viewportRegion": {"return": {"type": "Object", "description": "Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)"}, "description": "Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)", "guessedname": "viewportRegion", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The text content of the element (includes text of any descending elements)."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}], "description": "Returns the text content of the HTMLElement.", "guessedname": "getText", "guessedtype": "function"}, "setStyle": {"params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to apply the style to."}, {"type": "String", "name": "att", "description": " The style property to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property for a given element.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "Int", "description": "The X position of the element"}, "params": [{"type": "", "name": "element", "description": " The target element"}], "description": "Gets the current X position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "Int", "description": "The Y position of the element"}, "params": [{"type": "", "name": "element", "description": " The target element"}], "description": "Gets the current Y position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "params": [{"type": "Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "description": "Check if any part of this node is in the passed region", "guessedname": "inRegion", "guessedtype": "function"}, "_getRegExp": {"return": {"type": "RegExp", "description": "An instance of RegExp"}, "description": "Memoizes dynamic regular expressions to boost runtime performance.", "private": "", "params": [{"type": "String", "name": "str", "description": " The string to convert to a regular expression."}, {"type": "String", "name": "flags", "description": " optional An optinal string of flags."}], "guessedname": "_getRegExp", "guessedtype": "function"}, "next": {"return": {"type": "HTMLElement | null", "description": "The matching DOM node or null if none found."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current DOM node being tested as its only argument.\nIf no function is given, the first sibling is returned."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be scanned, or just element nodes."}], "description": "Finds the next sibling of the element.", "guessedname": "next", "guessedtype": "function"}, "children": {"return": {"type": "Array", "description": "The collection of child elements."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, all children are collected."}], "description": "Finds all HTMLElement childNodes.", "guessedname": "children", "guessedtype": "function"}, "inViewportRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "description": "Check if any part of this element is in the viewport", "guessedname": "inViewportRegion", "guessedtype": "function"}, "_bruteContains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "description": "Brute force version of contains.\nUsed for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "guessedname": "_bruteContains", "guessedtype": "function"}, "setX": {"params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "x", "description": " The X values for new position (coordinates are page-based)"}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "create": {"return": {"type": "HTMLElement", "description": "The newly created element."}, "params": [{"type": "String", "name": "html", "description": " The string of HTML to convert to a DOM element."}, {"type": "Document", "name": "document", "description": " An optional document to create the node with."}], "description": "Returns an HTMLElement for the given string of HTML.", "guessedname": "create", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "description": "Determines whether or not one HTMLElement is or contains another HTMLElement.", "guessedname": "contains", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property."}, "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "description": "Returns the computed style for the given node.", "guessedname": "getComputedStyle", "guessedtype": "function"}, "winHeight": {"return": {"type": "Int", "description": "The pixel height of the viewport."}, "description": "Returns the inner height of the viewport (exludes scrollbar).", "guessedname": "winHeight", "guessedtype": "function"}, "setStyles": {"params": [{"type": "HTMLElement", "name": "node", "description": " An HTMLElement to apply the styles to."}, {"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties."}, "intersect": {"return": {"type": "Object", "description": "Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)"}, "params": [{"type": "HTMLElement", "name": "element", "description": " The first element"}, {"type": "HTMLElement | Object", "name": "element2", "description": " The element or region to check the interect with"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for the first element if we already have the data (for performance i.e. DragDrop)"}], "description": "Find the intersect information for the passes nodes.", "guessedname": "intersect", "guessedtype": "function"}, "toggleClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to be toggled"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added.", "guessedname": "toggleClass", "guessedtype": "function"}, "previous": {"return": {"type": "HTMLElement | null", "description": "The matching DOM node or null if none found."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current DOM node being tested as its only argument.\nIf no function is given, the first sibling is returned."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be scanned, or just element nodes."}], "description": "Finds the previous sibling of the element.", "guessedname": "previous", "guessedtype": "function"}, "addClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given DOM element.", "guessedname": "addClass", "guessedtype": "function"}, "winWidth": {"return": {"type": "Int", "description": "The pixel width of the viewport."}, "description": "Returns the inner width of the viewport (exludes scrollbar).", "guessedname": "winWidth", "guessedtype": "function"}, "byTag": {"return": {"type": "Array", "description": "The collection of matching elements."}, "params": [{"type": "String", "name": "tag", "description": " The tag being search for."}, {"type": "HTMLElement", "name": "root", "description": " optional An optional root element to start from."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, all elements with the given tag are returned."}], "description": "Finds all elements with the given tag.", "guessedname": "byTag", "guessedtype": "function"}, "removeClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element.", "guessedname": "removeClass", "guessedtype": "function"}, "docScrollY": {"return": {"type": "Int", "description": "The scroll amount in pixels."}, "description": "Amount page has been scroll horizontally", "guessedname": "docScrollY", "guessedtype": "function"}, "docScrollX": {"return": {"type": "Int", "description": "The scroll amount in pixels."}, "description": "Amount page has been scroll vertically", "guessedname": "docScrollX", "guessedtype": "function"}, "docHeight": {"return": {"type": "Int", "description": "The pixel height of the document."}, "description": "Document height", "guessedname": "docHeight", "guessedtype": "function"}, "filterElementsBy": {"return": {"type": "Array", "description": "The filtered collection of HTMLElements."}, "params": [{"type": "Array", "name": "elements", "description": " The collection of HTMLElements to filter."}, {"type": "Function", "name": "fn", "description": " A boolean test to apply.\nThe function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, all HTMLElements are kept."}], "description": "Filters a collection of HTMLElements by the given attributes.", "guessedname": "filterElementsBy", "guessedtype": "function"}, "getStyle": {"params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "description": "Returns the current style value for the given property.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "_getWin": {"return": {"type": "Object", "description": "The window for the given element or the default window."}, "description": "returns the appropriate window.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "guessedname": "_getWin", "guessedtype": "function"}, "lastChild": {"return": {"type": "HTMLElement | null", "description": "The first matching child html element."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first found is returned."}], "description": "Finds the lastChild of the given HTMLElement.", "guessedname": "lastChild", "guessedtype": "function"}, "byId": {"return": {"type": "HTMLElement | null", "description": "The HTMLElement with the id, or null if none found."}, "params": [{"type": "String", "name": "id", "description": " the id attribute"}, {"type": "Object", "name": "doc", "description": " optional The document to search. Defaults to current document"}], "description": "Returns the HTMLElement with the given ID (Wrapper for document.getElementById).", "guessedname": "byId", "guessedtype": "function"}, "setY": {"params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "y", "description": " The Y values for new position (coordinates are page-based)"}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element\nTODO: test inDocument\/display"}, "params": [{"type": "", "name": "element", "description": " The target element"}], "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "elementByAxis": {"return": {"type": "HTMLElement | null", "description": "The matching element or null if none found."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "axis", "description": " The axis to search (parentNode, nextSibling, previousSibling)."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes.\nThe optional function is passed the current DOM node being tested as its only argument.\nIf no function is given, the first element is returned."}], "description": "Searches the element by the given axis for the first matching element.", "guessedname": "elementByAxis", "guessedtype": "function"}, "ancestor": {"return": {"type": "HTMLElement | null", "description": "The matching DOM node or null if none found."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current DOM node being tested as its only argument.\nIf no function is given, the parentNode is returned."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be scanned, or just element nodes."}], "description": "Finds the ancestor of the element.", "guessedname": "ancestor", "guessedtype": "function"}, "docWidth": {"return": {"type": "Int", "description": "The pixel width of the document."}, "description": "Document width", "guessedname": "docWidth", "guessedtype": "function"}, "region": {"return": {"type": "Object", "description": "Object literal containing the following about this element: (top, right, bottom, left)"}, "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}], "description": "Returns an Object literal containing the following about this element: (top, right, bottom, left)", "guessedname": "region", "guessedtype": "function"}, "firstChild": {"return": {"type": "HTMLElement | null", "description": "The first matching child html element."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first found is returned."}], "description": "Finds the firstChild of the given HTMLElement.", "guessedname": "firstChild", "guessedtype": "function"}, "firstByTag": {"return": {"type": "HTMLElement", "description": "The matching element."}, "params": [{"type": "String", "name": "tag", "description": " The tag being search for."}, {"type": "HTMLElement", "name": "root", "description": " optional An optional root element to start from."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first match is returned."}], "description": "Finds the first element with the given tag.", "guessedname": "firstByTag", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the given class."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether a DOM element has the given className.", "guessedname": "hasClass", "guessedtype": "function"}, "childrenByTag": {"return": {"type": "Array", "description": "The collection of child elements."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "tag", "description": " The tag to search for."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, all children with the given tag are collected."}], "description": "Finds all HTMLElement childNodes matching the given tag.", "guessedname": "childrenByTag", "guessedtype": "function"}, "_getDoc": {"return": {"type": "Object", "description": "The document for the given element or the default document."}, "description": "returns the appropriate document.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "guessedname": "_getDoc", "guessedtype": "function"}}}, "YUI": {"global": "", "methods": {"on": {"return": {"type": "Event.Handle", "description": "a handle object for \nunsubscribing to this event."}, "params": [{"type": "string", "name": "type", "description": "  the event type"}, {"type": "Function", "name": "f", "description": "  the function to execute"}, {"type": "", "name": "o", "description": " the Event.Target or element to attach to"}, {"type": "", "name": "context", "description": " Optional execution context"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to append\nto the signature provided when the event fires."}], "description": "Attach an event listener, either to a DOM object\nor to an Event.Target.", "guessedname": "on", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Bind a module to a YUI instance", "params": [{"type": "string", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)"}, {"type": "function", "name": "*callback", "description": "  callback function executed when \nthe instance has the required functionality.  If included, it\nmust be the last parameter."}], "guessedname": "use", "guessedtype": "function", "todo": "Implement versioning?  loader can load different versions?\nShould sub-modules\/plugins be normal modules, or do\nwe add syntax for specifying these?\nYUI().use('dragdrop')\nYUI().use('dragdrop:2.4.0'); \/\/ specific version\nYUI().use('dragdrop:2.4.0-'); \/\/ at least this version\nYUI().use('dragdrop:2.4.0-2.9999.9999'); \/\/ version range\nYUI().use('*'); \/\/ use all available modules\nYUI().use('lang+dump+substitute'); \/\/ use lang and some plugins\nYUI().use('lang+*'); \/\/ use lang and all known plugins"}, "guid": {"return": {"type": "string", "description": "the guid"}, "params": [{"type": "string", "name": "pre", "description": "  optional guid prefix"}], "description": "Generate an id that is unique among all YUI instances", "guessedname": "guid", "guessedtype": "function"}, "log": {"return": {"type": "YUI", "description": "YUI instance"}, "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}], "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the logger widget and anything else\ncan consume.  If the 'useConsole' config is true, it will\nwrite to the browser console if available.", "guessedname": "log", "guessedtype": "function"}, "dump": {"return": {"type": "String", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "params": [{"type": "Object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function", "todo": "dumping a window is causing an unhandled exception in\nFireFox.  Trying to account for it is hanging FireFox.\nCould be a FireBug interaction."}, "mix": {"return": {"type": "object", "description": "the augmented object"}, "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "int", "name": "mode", "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype"}, {"type": "boolean", "name": "merge", "description": "  merge objects instead of overwriting\/ignoring\nUsed by Y.aggregate"}], "guessedname": "mix", "guessedtype": "function", "todo": "add constants for the modes"}, "applyTo": {"return": {"type": "object", "description": "the return value from the applied method or null"}, "params": [{"type": "string", "name": "id", "description": "  the YUI instance id"}, {"type": "string", "name": "method", "description": "  the name of the method to exectute.\nEx: 'Object.keys'"}, {"type": "Array", "name": "args", "description": "  the arguments to apply to the method"}], "description": "Executes a method on a YUI instance with\nthe specified id if the specified method is whitelisted.", "guessedname": "applyTo", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "before": {"return": {"type": "", "description": "unsubscribe handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "guessedname": "before", "guessedtype": "function"}, "later": {"return": {"type": "object", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed."}, {"type": "", "name": "o", "description": " the context object."}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute."}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]."}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled."}], "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "guessedname": "later", "guessedtype": "function"}, "_init": {"guessedname": "_init", "params": [{"type": "", "name": "o", "description": " config options"}], "description": "Initialize this YUI instance", "private": "", "guessedtype": "function"}, "merge": {"return": {"type": "object", "description": "the new merged object"}, "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.", "guessedname": "merge", "guessedtype": "function"}, "add": {"return": {"type": "YUI", "description": "the YUI instance\nrequires   - features that should be present before loading\noptional   - optional features that should be present if load optional defined\nuse  - features that should be attached automatically\nskinnable  -\nrollup\nomit - features that should not be loaded if this module is present"}, "params": [{"type": "string", "name": "name", "description": "  module name"}, {"type": "string", "name": "namespace", "description": "  name space for the module"}, {"type": "Function", "name": "fn", "description": "  entry point into the module that\nis used to bind module to the YUI instance"}, {"type": "string", "name": "version", "description": "  version string"}], "description": "Register a module", "guessedname": "add", "guessedtype": "function"}, "detach": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "", "name": "type", "description": " the type of event, or a Event.Handle to\nfor the subscription.  If the Event.Handle is passed\nin, the other parameters are not used."}, {"type": "Function", "name": "f", "description": "  the subscribed function"}, {"type": "", "name": "o", "description": " the object or element the listener is subscribed\nto."}], "description": "Detach an event listener (either a custom event or a\nDOM event", "guessedname": "detach", "guessedtype": "function"}, "fail": {"return": {"type": "YUI", "description": "this YUI instance"}, "params": [{"type": "string", "name": "msg", "description": "  the failure message"}, {"type": "Error", "name": "e", "description": "  Optional JS error that was caught.  If supplied\nand throwFail is specified, this error will be re-thrown."}], "description": "Report an error.  The reporting mechanism is controled by\nthe 'throwFail' configuration attribute.  If throwFail is\nnot specified, the message is written to the logger, otherwise\na JS error is thrown", "guessedname": "fail", "guessedtype": "function"}, "namespace": {"return": {"type": "object", "description": "A reference to the last namespace object created"}, "params": [{"type": "string*", "name": "arguments", "description": " 1-n namespaces to create"}], "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YUI.property.package\");\n<\/pre>\nEither of the above would create YUI.property, then\nYUI.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "guessedname": "namespace", "guessedtype": "function"}, "after": {"todo": "add event\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "return": {"type": "Event.Handle", "description": "unsubscribe handle"}, "description": "Executes the callback after a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.", "guessedname": "after", "guessedtype": "function"}, "stamp": {"return": {"type": "string", "description": "The object's guid"}, "params": [{"type": "", "name": "o", "description": " The object to stamp"}], "description": "Stamps an object with a guid.  If the object already\nhas one, a new one is not created", "guessedname": "stamp", "guessedtype": "function"}}, "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.", "constructors": [{"params": [{"type": "", "name": "o", "description": " Optional configuration object.  Options:\n<ul>\n<li>------------------------------------------------------------------------<\/li>\n<li>Global:<\/li>\n<li>------------------------------------------------------------------------<\/li>\n<li>debug:\nTurn debug statements on or off<\/li>\n<li>useConsole:\nLog to the browser console if debug is on and the console is available<\/li>\n<li>logInclude:\nA hash of log sources that should be logged.  If specified, only log messages from these sources will be logged.\n<\/li>\n<li>logExclude:\nA hash of log sources that should be not be logged.  If specified, all sources are logged if not on this list.<\/li>\n<li>throwFail:\nIf throwFail is set, Y.fail will generate or re-throw a JS error.  Otherwise the failure is logged.\n<li>win:\nThe target window\/frame<\/li>\n<li>core:\nA list of modules that defines the YUI core (overrides the default)<\/li>\n<li>------------------------------------------------------------------------<\/li>\n<li>For event and get:<\/li>\n<li>------------------------------------------------------------------------<\/li>\n<li>pollInterval:\nThe default poll interval<\/li>\n<li>-------------------------------------------------------------------------<\/li>\n<li>For loader:<\/li>\n<li>-------------------------------------------------------------------------<\/li>\n<li>base:\nThe base dir<\/li>\n<li>secureBase:\nThe secure base dir (not implemented)<\/li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http:\/\/yui.yahooapis.com\/combo?<\/li>\n<li>root:\nThe root path to prepend to module names for the combo service. Ex: 2.5.2\/build\/<\/li>\n<li>filter:\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).<\/dd>\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>\n<\/li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections required to load your dependencies<\/li>\n<li>ignore:\nA list of modules that should never be dynamically loaded<\/li>\n<li>force:\nA list of modules that should always be loaded when required, even if already present on the page<\/li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for new nodes<\/li>\n<li>charset:\ncharset for dynamic nodes<\/li>\n<li>timeout:\nnumber of milliseconds before a timeout occurs when dynamically loading nodes.  in not set, there is no timeout<\/li>\n<li>context:\nexecution context for all callbacks<\/li>\n<li>onSuccess:\ncallback for the 'success' event<\/li>\n<li>onFailure:\ncallback for the 'failure' event<\/li>\n<li>onTimeout:\ncallback for the 'timeout' event<\/li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded<\/li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported module metadata<\/li>\n<\/ul>"}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved."}], "namespace": "", "module": "yui", "uses": ["Event.Target"], "file": "yui.js", "shortname": "YUI", "properties": {"_iefix": {"guessedname": "_iefix", "param": "{Function} r  the object to receive the augmentation", "description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "private": "", "guessedtype": "property"}}, "name": "YUI"}, "State": {"name": "State", "constructors": [{"description": "Maintain state for a collection of items.  Individual properties \nare stored in hash tables.  This is instead of having state objects \nfor each item in the collection.  For large collections, especially \nchanging ones, this approach may perform better."}], "namespace": "", "module": "attribute", "guessedname": "State", "methods": {"add": {"params": [{"type": "string", "name": "name", "description": "  identifier for this attribute"}, {"type": "", "name": "o", "description": " hash of attributes"}], "description": "Add an item with all of the properties in the supplied object.", "guessedname": "add", "guessedtype": "function"}, "remove": {"params": [{"type": "string", "name": "name", "description": "  name of attribute"}, {"type": "string|object|array", "name": "o", "description": "  single key or collection of keys to delete"}], "description": "Remove entire item, or optionally specified fields", "guessedname": "remove", "guessedtype": "function"}, "get": {"return": {"type": "", "description": "either the value of the supplied key or an object with\nall data."}, "params": [{"type": "string", "name": "name", "description": "  name of attribute"}, {"type": "string", "name": "key", "description": "  optional attribute to get"}], "description": "For a given item, gets an attribute.  If key is not\nsupplied, a disposable object with all attributes is \nreturned.  Use of the latter option makes sense when\nworking with single items, but not if object explosion\nmight cause gc problems."}}, "file": "State.js", "guessedtype": "function", "shortname": "State", "properties": {"data": {"description": "Hash of attributes", "guessedname": "data", "guessedtype": "property"}}, "description": "Maintain state for a collection of items.  Individual properties \nare stored in hash tables.  This is instead of having state objects \nfor each item in the collection.  For large collections, especially \nchanging ones, this approach may perform better."}, "YUI~object": {"name": "YUI~object", "namespace": "", "module": "yui", "methods": {"Object.keys": {"return": {"type": "string[]", "description": "the keys"}, "description": "Returns an array containing the object's keys", "static": "", "guessedname": "keys", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}]}, "Object": {"return": {"type": "object", "description": "the new object"}, "description": "Y.Object(o) returns a new object based upon the supplied object.", "static": "", "guessedname": "Object", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the supplier object"}]}, "Object.owns": {"return": {"type": "boolean", "description": "true if the object has the property on the instance"}, "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.", "deprecated": "Safari 1.x support has been removed, so this is simply a \nwrapper for the native implementation.  Use the native implementation\ndirectly instead.", "static": "", "guessedname": "owns", "guessedtype": "function", "params": [{"type": "any", "name": "o", "description": "  The object being testing"}, {"type": "string", "name": "p", "description": "  the property to look for"}], "todo": "Remove in PR2"}, "Object.each": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas paramters (in that order).", "static": "", "guessedname": "each", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "function", "name": "f", "description": "  the function to execute"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "boolean", "name": "proto", "description": "  include proto"}]}}, "file": "yui-object.js", "shortname": "YUI~object", "description": "Adds the following Object utilities to the YUI instance"}, "YUI~substitute": {"name": "YUI~substitute", "namespace": "", "module": "substitute", "methods": {"substitute": {"return": {"type": "string", "description": "the substituted string"}, "params": [{"type": "string", "name": "s", "description": "  The string that will be modified."}, {"type": "", "name": "o", "description": " An object containing the replacement values"}, {"type": "function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs if Y.dump is available (if dump isn't available, toString()\nis used).\nThis method is included in the 'substitute' module.  It is not included\nin the YUI module.", "guessedname": "substitute", "guessedtype": "function"}}, "file": "substitute.js", "shortname": "YUI~substitute", "description": "The following methods are added to the YUI instance"}, "io": {"name": "io", "namespace": "", "module": "io", "properties": {"_headers": {"description": "Object of default HTTP headers to be initialized and sent\nfor all transactions.", "private": "", "static": "", "guessedname": "_headers", "guessedtype": "property", "type": "{object}"}, "_qState": {"description": "Property to determine whether the queue is set to\n1 (active) or 0 (inactive).  When inactive, transactions\nwill be stored in the queue until the queue is set to active.", "private": "", "static": "", "guessedname": "_qState", "guessedtype": "property", "type": "{number}"}, "_q": {"description": "Array of transactions queued for processing", "private": "", "static": "", "guessedname": "_q", "guessedtype": "property", "type": "{array}"}, "_qMaxSize": {"description": "Queue property to set a maximum queue storage size.  When\nthis property is set, the queue will not store any more transactions\nuntil the queue size os reduced below this threshold. There is no\nmaximum queue size until it is explicitly set.", "private": "", "static": "", "guessedname": "_qMaxSize", "guessedtype": "property", "type": "{number}"}, "_xdr": {"description": "Map of transports created for cross-domain requests.", "private": "", "static": "", "guessedname": "_xdr", "guessedtype": "property", "type": "{object}"}, "_timeOut": {"description": "Object that stores timeout values for any transaction with\na defined \"timeout\" configuration property.", "private": "", "static": "", "guessedname": "_timeout", "guessedtype": "property", "type": "{object}"}, "transactionId": {"description": "A transaction counter that increments for each transaction.", "private": "", "static": "", "guessedname": "transactionId", "guessedtype": "property", "type": "{number}"}, "_fn": {"description": "Object that stores callback handlers for cross-domain requests,", "private": "", "static": "", "guessedname": "_fn", "guessedtype": "property", "type": "{object}"}}, "methods": {"_concat": {"return": {"type": "number", "description": ""}, "static": "", "params": [{"type": "string", "name": "s", "description": " - URI or root data."}, {"type": "string", "name": "d", "description": " - data to be concatenated onto URI."}], "description": "Method that concatenates string data for HTTP GET transactions.", "private": ""}, "_create": {"return": {"type": "object", "description": ""}, "static": "", "params": [{"type": "number", "name": "s", "description": " - URI or root data."}, {"type": "number", "name": "c", "description": " - configuration object"}], "description": "Method that creates a unique transaction object for each\nrequest..", "private": ""}, "io.queue": {"return": {"type": "number", "description": ""}, "description": "Method for requesting a transaction, and queueing the\nrequest before it is sent to the resource. This is the\ninterface for _queue().", "static": "", "guessedname": "queue", "guessedtype": "property", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "public": ""}, "io.queue.size": {"return": {"type": "number", "description": ""}, "description": "Method to query the current size of the queue, or to\nset a maximum queue size.  This is the interface for _size().", "static": "", "guessedname": "size", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - Specified maximum size of queue."}], "public": ""}, "_stop": {"static": "", "return": {"type": "void", "description": ""}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is reset to \"active\".", "private": ""}, "header": {"return": {"type": "number", "description": ""}, "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.\nThis is the interface for _setHeader().", "static": "", "guessedname": "header", "guessedtype": "property", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "public": ""}, "_startTimeout": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Starts timeout count if config,timeout is defined.", "private": ""}, "_ioFailure": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:failure\" and creates, fires a\ntransaction-specific \"failure\" event, if config.on.failure is\ndefined.", "private": ""}, "io": {"return": {"type": "object", "description": ""}, "description": "Method for requesting a transaction. Each transaction may include\na configuration object.  Its properties are:\n<p><strong>method<\/strong>: HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.<\/p>\n<p><strong>data<\/strong>: This is the name-value string that will be sent as the transaction\ndata.  If the request is HTTP GET, the data become part of\nquerystring. If HTTP POST, the data are sent in the message body.<\/p>\n<p><strong>xdr<\/strong>: Defines the transport to be used for cross-domain requests.  By\nsetting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest.  Currently, the only alternate\ntransport supported is Flash (e.g., { xdr: 'flash' }).<\/p>\n<p><strong>form<\/strong>: This is a defined object used to process HTML form as data.  The\nproperties of <code>form<\/code> are:<\/p>\n<ul>\n<li>id: object, \/\/HTML form object or id of HTML form<\/li>\n<li>useDisabled: boolean, \/\/Allow disabled HTML form field values\nto be sent as part of the data.<\/li>\n<\/ul>\n<p><strong>on<\/strong>: This is a defined object used to create and handle specific\nevents during a transaction lifecycle.  These events will fire in\naddition to the global io events. The events are:<\/p>\n<ul><li>start - This event is fired when a request is sent to a resource.<\/li>\n<li>complete - This event fires when the transaction is complete.<\/li>\n<li>success - This event fires when the response status resolves to\nHTTP 2xx.<\/li>\n<li>failure - This event fires when the response status resolves to\nHTTP 4xx, 5xx, and beyond.<\/li>\n<li>abort - This even is fired when a transaction abort is fire by\ntimeout, or when it is manually aborted.<\/li><\/ul>\n<p>The properties of <code>on<\/code> are:<\/p>\n<ul>\n<li>start: function(id, args){},<\/li>\n<li>complete: function(id, responseobject, args){},<\/li>\n<li>success: function(id, responseobject, args){},<\/li>\n<li>failure: function(id, responseobject, args){},<\/li>\n<li>abort: function(id, args){}<\/li>\n<li>Each property can reference a function or be written as an inline\nfunction.<\/li>\n<\/ul>\n<p><strong>context<\/strong>: Object reference for an event handler when it is implemented\nas a method of a base object. Defining \"context\" will preserve\nthe proper reference of \"this\" used in the event handler.<\/p>\n<p><strong>headers<\/strong>: This is a defined object of client headers, as many as.\ndesired for the transaction.  The property for <code>header<\/code> is:<\/p>\n<ul>\n<li>header: value<\/li>\n<\/ul>\n<p><strong>timeout<\/strong>: This value, defined as milliseconds, is a time threshold for the\ntransaction. When this threshold is reached, and the transaction's\nComplete event has not yet fired, the transaction will be aborted.<\/p>\n<p><strong>arguments<\/strong>: Object, array, string, or number passed to all registered\nevent handlers.  This value is available as the second\nargument in the \"start\" and \"abort\" event handlers; and, it is\nthe third argument in the \"complete\", \"success\", and \"failure\"\nevent handlers.<\/p>", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "guessedname": "io", "guessedtype": "property", "public": ""}, "_size": {"static": "", "return": {"type": "number", "description": ""}, "description": "Method to query the current size of the queue, or to\nset a maximum queue size.", "private": ""}, "_start": {"static": "", "return": {"type": "void", "description": ""}, "description": "Method for setting the queue to active. If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order.", "private": ""}, "_ioSuccess": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:success\" and creates, fires a\ntransaction-specific \"success\" event, if config.on.success is\ndefined.", "private": ""}, "_async": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "string", "name": "d", "description": " - Transaction data."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Method that sends the transaction request.", "private": ""}, "io.transport": {"return": {"type": "void", "description": ""}, "description": "Method for specifying and initializing a transport\nto facilitate cross-domain HTTP requests.  This is the\ninterface for _initTransport", "static": "", "guessedname": "transport", "guessedtype": "property", "params": [{"type": "object", "name": "t", "description": " - configuration object for the transport."}], "public": ""}, "_readyState": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Event handler bound to onreadystatechange.", "private": ""}, "_clearTimeout": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "number", "name": "id", "description": " - Transaction id."}], "description": "Clears the timeout interval started by _startTimeout().", "private": ""}, "_serialize": {"return": {"type": "", "description": "string"}, "static": "", "params": [{"type": "object", "name": "c", "description": " - Configuration object specific to form operations."}], "description": "Method to enumerate through an HTML form's elements collection\nand return a string comprised of key-value pairs.", "private": ""}, "io.queue.purge": {"return": {"type": "void", "description": ""}, "description": "Method for removing a specific, pending transaction from\nthe queue. This is the interface for _purge().", "static": "", "guessedname": "purge", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - ID of queued transaction."}], "public": ""}, "_tPubSub": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "e", "description": " - event to be published"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Method for creating and subscribing transaction events.", "private": ""}, "_purge": {"static": "", "return": {"type": "void", "description": ""}, "description": "Method for removing a specific, pending transaction from\nthe queue.", "private": ""}, "io.queue.start": {"return": {"type": "void", "description": ""}, "description": "Method for setting the queue to \"active\". If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order. This is the interface for _start().", "static": "", "guessedname": "start", "guessedtype": "property", "public": ""}, "io.queue.promote": {"return": {"type": "void", "description": ""}, "description": "Method for promoting a transaction to the top of the queue.\nThis is the interface for _unshift().", "static": "", "guessedname": "promote", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - ID of queued transaction."}], "public": ""}, "io.queue.stop": {"return": {"type": "void", "description": ""}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is set to \"active\". This is the\ninterface for _stop().", "static": "", "guessedname": "stop", "guessedtype": "property", "public": ""}, "_shift": {"static": "", "return": {"type": "void", "description": ""}, "description": "Method for removing a transaction from the top of the\nqueue, and sending the transaction to _io().", "private": ""}, "_setHeader": {"return": {"type": "number", "description": ""}, "static": "", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.", "private": ""}, "_swf": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "uri", "description": " - location of IO.swf."}, {"type": "string", "name": "yid", "description": " - string representation of YUI instance."}], "description": "Method that creates the Flash transport swf.", "private": ""}, "_ioComplete": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "id", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:complete\" and creates, fires a\ntransaction-specific \"complete\" event, if config.on.complete is\ndefined.", "private": ""}, "_setHeaders": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - XHR instance for the specific transaction."}, {"type": "object", "name": "h", "description": " - HTTP headers for the specific transaction, as defined\nin the configuration object passed to YUI.io()."}], "description": "Method that sets all HTTP headers to be sent in a transaction.", "private": ""}, "_xhr": {"static": "", "return": {"type": "object", "description": ""}, "description": "Method that creates the XMLHttpRequest transport", "private": ""}, "_queue": {"static": "", "return": {"type": "number", "description": ""}, "description": "Method for requesting a transaction, and queueing the\nrequest before it is sent to the resource.", "private": ""}, "_initTransport": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - object of transport configurations."}], "description": "Method to initialize the desired transport medium.", "private": ""}, "_io": {"return": {"type": "object", "description": ""}, "static": "", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Implemented by <code>Y.io<\/code>.", "private": ""}, "_ioStart": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:start\" and creates, fires a\ntransaction-specific start event, if config.on.start is\ndefined.", "private": ""}, "_unshift": {"static": "", "return": {"type": "void", "description": ""}, "description": "Method for promoting a transaction to the top of the queue.", "private": ""}, "_handleResponse": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Method that determines if a transaction response qualifies\nas success or failure, based on the response HTTP status code, and\nfires the appropriate success or failure events.", "private": ""}, "_id": {"static": "", "return": {"type": "number", "description": ""}, "description": "Method that increments _transactionId for each transaction.", "private": ""}, "_ioAbort": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Fires event \"io:abort\" and creates, fires a\ntransaction-specific \"abort\" event, if config.on.abort is\ndefined.", "private": ""}}, "file": "io.js", "shortname": "io", "events": {"io:abort": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is aborted\nmanually or by a defined configuration <code>timeout<\/code>.", "guessedname": "E_ABORT", "guessedtype": "property"}, "io:start": {"type": "Event Custom", "description": "This event is fired by IO when a transaction is initiated.", "guessedname": "E_START", "guessedtype": "property"}, "io:complete": {"type": "Event Custom", "description": "This event is fired by IO when a transaction is complete and\nall response data are available.", "guessedname": "E_COMPLETE", "guessedtype": "property"}, "io:xdrReady": {"type": "Event Custom", "description": "This event is fired by IO when the XDR transport is initialized\nand ready.", "guessedname": "E_XDR_READY", "guessedtype": "property"}, "io:success": {"type": "Event Custom", "description": "This event is fired by IO when a transaction is complete and\nthe HTTP status resolves to HTTP 2xx.", "guessedname": "E_SUCCESS", "guessedtype": "property"}, "io:failure": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete and\nthe HTTP status resolves to HTTP 4xx, 5xx and above.", "guessedname": "E_FAILURE", "guessedtype": "property"}}, "description": "The IO class is a utility that brokers HTTP requests through a simplified\ninterface.  It allows JavaScript to make HTTP requests to\na resource without incurring a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  IO can also use\nFlash, if specified as a transport, for making cross-domain requests."}, "Do.Method": {"name": "Do.Method", "constructors": [{"params": [{"type": "", "name": "obj", "description": " The object to operate on"}, {"type": "", "name": "sFn", "description": " The name of the method to displace"}], "description": "Wrapper for a displaced method with aop enabled"}], "namespace": "", "module": "event", "guessedname": "Method", "methods": {"register": {"params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Register a aop subscriber", "guessedname": "register", "guessedtype": "function"}, "exec": {"description": "Execute the wrapped method", "guessedname": "exec", "guessedtype": "function"}}, "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Method", "description": "Wrapper for a displaced method with aop enabled"}, "Node": {"methods": {"appendChild": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be appended"}], "description": "Passes through to DOM method.", "guessedname": "appendChild", "guessedtype": "property"}, "all": {"return": {"type": "NodeList", "description": "A NodeList instance for the supplied nodes."}, "description": "Retrieves a NodeList instance for the given object\/string.", "static": "", "guessedname": "all", "guessedtype": "function", "params": [{"type": "HTMLCollection|Array|String", "name": "node", "description": " The object to wrap."}, {"type": "document|Node", "name": "doc", "description": " optional The document containing the node. Defaults to current document."}]}, "set": {"chainable": "", "params": [{"type": "String", "name": "prop", "description": " Property to set"}, {"type": "any", "name": "val", "description": " Value to apply to the given property"}], "description": "Set the value of the property\/attribute on the HTMLElement bound to this Node.\nOnly strings\/numbers\/booleans are passed through unless a SETTER exists.", "guessedname": "set", "guessedtype": "function"}, "getAttribute": {"return": {"type": "String", "description": "The current value of the attribute"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to retrieve"}], "description": "Passes through to DOM method.", "guessedname": "getAttribute", "guessedtype": "property"}, "replaceClass": {"chainable": "", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class.\nIf no oldClassName is present, the newClassName is simply added."}, "focus": {"chainable": "", "description": "Passes through to DOM method.", "guessedname": "focus", "guessedtype": "property"}, "cloneNode": {"return": {"type": "Node", "description": "The clone"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be cloned"}], "description": "Passes through to DOM method.", "guessedname": "cloneNode", "guessedtype": "property"}, "setStyle": {"chainable": "", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property of the node."}, "getX": {"return": {"type": "Int", "description": "The X position of the node"}, "description": "Gets the current position of the node in page coordinates. \nNodes must be part of the DOM tree to have page coordinates\n(display:none or nodes not appended return false)."}, "getY": {"return": {"type": "Int", "description": "The Y position of the node"}, "description": "Gets the current position of the node in page coordinates. \nNodes must be part of the DOM tree to have page coordinates\n(display:none or nodes not appended return false)."}, "inRegion": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Boolean", "name": "all", "description": " Whether or not all of the node must be in the region."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Determines whether or not the node is within the giving region.", "guessedname": "inRegion", "guessedtype": "function"}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a single node based on the given CSS selector.", "guessedname": "query", "guessedtype": "function"}, "next": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes."}], "description": "Returns the next matching sibling. \nReturns the nearest element node sibling if no method provided.", "guessedname": "next", "guessedtype": "function"}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection\/Array."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a nodeList based on the given CSS selector.", "guessedname": "queryAll", "guessedtype": "function"}, "inViewportRegion": {"return": {"type": "Boolean", "description": "Whether or not the node is currently positioned\nwithin the viewport's region"}, "description": "Determines whether or not the node is currently visible in the viewport."}, "create": {"return": {"type": "Node", "description": "A new Node instance"}, "description": "Creates a Node instance from HTML string", "param": "{String} html HTML string", "params": [{"type": "String|Array", "name": "html", "description": " The string of html to create"}], "guessedname": "create", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not this node is the needle its ancestor"}, "params": [{"type": "Node | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the ndoe is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "contains", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the computed value for the given style property."}, "submit": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements", "guessedname": "submit", "guessedtype": "property"}, "setStyles": {"chainable": "", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties on the node."}, "attach": {"params": [{"type": "String", "name": "type", "description": " The type of DOM Event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "arg", "description": " An argument object to pass to the handler"}], "description": "Attaches a DOM event handler.", "guessedname": "attach", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the node has any childNodes"}, "description": "Passes through to DOM method.", "guessedname": "hasChildNodes", "guessedtype": "property"}, "intersect": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Compares the intersection of the node with another node or region", "guessedname": "intersect", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Passes through to DOM method.", "guessedname": "blur", "guessedtype": "property"}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes."}], "description": "Returns the previous matching sibling. \nReturns the nearest element node sibling if no method provided.", "guessedname": "previous", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not this node is appended to the document."}, "params": [{"type": "Node|HTMLElement", "name": "doc", "description": " optional An optional document to check against.\nDefaults to current document."}], "description": "Determines whether the node is appended to the document.", "guessedname": "inDoc", "guessedtype": "function"}, "addClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Adds a class name to the node."}, "reset": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements", "guessedname": "reset", "guessedtype": "property"}, "insertBefore": {"return": {"type": "Node", "description": "The inserted node"}, "params": [{"type": "HTMLElement | Node", "name": "newNode", "description": " Node to be appended"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be inserted before"}], "description": "Passes through to DOM method.", "guessedname": "insertBefore", "guessedtype": "property"}, "get": {"return": {"type": "any", "description": "Current value of the property"}, "description": "Get the value of the property\/attribute on the HTMLElement bound to this Node.\nOnly strings\/numbers\/booleans are passed through unless a GETTER exists.", "param": "{document|HTMLElement|HTMLCollection|Array|String} node The object to wrap.", "params": [{"type": "String", "name": "prop", "description": " Property to get"}], "guessedname": "get", "guessedtype": "function", "static": ""}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "A NodeList representing the HTMLCollection"}, "params": [{"type": "String", "name": "tagName", "description": " The tagName to collect"}], "description": "Passes through to DOM method.", "guessedname": "getElementsByTagName", "guessedtype": "property"}, "removeClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from the node."}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the style's current value."}, "hasAttribute": {"return": {"type": "Boolean", "description": "Whether or not the attribute is present"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to test for"}], "description": "Passes through to DOM method.", "guessedname": "hasAttribute", "guessedtype": "property"}, "replaceChild": {"return": {"type": "Node", "description": "The replaced node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be replaced"}], "description": "Passes through to DOM method.", "guessedname": "replaceChild", "guessedtype": "property"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "detach": {"params": [{"type": "String", "name": "type", "description": " The type of DOM Event"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}], "description": "Detaches a DOM event handler.", "guessedname": "detach", "guessedtype": "function"}, "setX": {"chainable": "", "params": [{"type": "Int", "name": "x", "description": " X value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.\nThe node must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."}, "setY": {"chainable": "", "params": [{"type": "Int", "name": "y", "description": " Y value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.\nThe node must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."}, "getXY": {"return": {"type": "Array", "description": "The XY position of the node"}, "description": "Gets the current position of the node in page coordinates. \nNodes must be part of the DOM tree to have page coordinates\n(display:none or nodes not appended return false)."}, "on": {"see": "attach", "params": [{"type": "String", "name": "type", "description": " The type of DOM Event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "arg", "description": " An argument object to pass to the handler"}], "description": "Alias for attach.", "guessedname": "on", "guessedtype": "function"}, "scrollIntoView": {"chainable": "", "description": "Passes through to DOM method.", "guessedname": "scrollIntoView", "guessedtype": "property"}, "setAttribute": {"chainable": "", "params": [{"type": "String", "name": "attribute", "description": " The attribute to set"}, {"type": "String", "name": "The", "description": " value to apply to the attribute"}], "description": "Passes through to DOM method.", "guessedname": "setAttribute", "guessedtype": "property"}, "removeChild": {"return": {"type": "Node", "description": "The removed node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be removed"}], "description": "Passes through to DOM method.", "guessedname": "removeChild", "guessedtype": "property"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and\/or HTMLElements.", "guessedname": "compareTo", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the node has the given class."}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether the node has the given className."}, "setXY": {"chainable": "", "params": [{"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.\nThe node must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."}, "plug": {"chainable": "", "params": [{"type": "Function", "name": "The", "description": " plugin Class to apply"}, {"type": "Object", "name": "config", "description": " An optional config to pass to the constructor"}], "description": "Applies the supplied plugin to the node.", "guessedname": "plug", "guessedtype": "function"}}, "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:<\/strong> All node properties are accessed using the\n<code>set<\/code> and <code>get<\/code> methods.", "constructors": [{"description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:<\/strong> All node properties are accessed using the\n<code>set<\/code> and <code>get<\/code> methods."}], "namespace": "", "module": "node", "guessedname": "BASE_NODE", "file": "node.js", "guessedtype": "property", "shortname": "Node", "properties": {"viewportRegion": {"type": "Node", "description": "Returns a region object for the node's viewport"}, "offsetParent": {"type": "Node", "description": "Returns a Node instance."}, "text": {"type": "String", "description": "Normalizes nodeInnerText and textContent."}, "firstChild": {"type": "Node", "description": "Returns a Node instance."}, "childNodes": {"type": "NodeList", "description": "Returns a NodeList instance."}, "children": {"type": "NodeList", "description": "Returns a NodeList instance."}, "tHead": {"type": "Node", "description": "Returns a Node instance."}, "rows": {"type": "NodeList", "description": "Returns a NodeList instance."}, "ATTR": {"description": "Extended Node interface for managing regions and screen positioning.\nAdds support for positioning elements and normalizes window size and scroll detection.", "guessedname": "ATTR", "guessedtype": "property"}, "winHeight": {"type": "{Int}", "description": "Returns the inner height of the viewport (exludes scrollbar)."}, "tBodies": {"type": "NodeList", "description": "Returns a NodeList instance."}, "ownerDocument": {"type": "Doc", "description": "Returns a Node instance."}, "previousSibling": {"type": "Node", "description": "Returns a Node instance."}, "body": {"type": "Node", "description": "Returns a Node instance."}, "elements": {"type": "NodeList", "description": "Returns a NodeList instance."}, "winWidth": {"type": "{Int}", "description": "Returns the inner width of the viewport (exludes scrollbar)."}, "docScrollY": {"type": "{Int}", "description": "Amount page has been scroll horizontally"}, "docScrollX": {"type": "{Int}", "description": "Amount page has been scroll vertically"}, "docHeight": {"type": "{Int}", "description": "Document height"}, "lastChild": {"type": "Node", "description": "Returns a Node instance."}, "documentElement": {"type": "Node", "description": "Returns a Node instance."}, "cells": {"type": "NodeList", "description": "Returns a NodeList instance."}, "parentNode": {"type": "Node", "description": "Returns a Node instance."}, "options": {"type": "String", "description": "Returns a nodeList of option elements"}, "region": {"type": "Node", "description": "Returns a region object for the node"}, "tFoot": {"type": "Node", "description": "Returns a Node instance."}}, "name": "Node"}, "Do": {"name": "Do", "namespace": "", "module": "event", "guessedname": "Do", "methods": {"_inject": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "private": "", "static": "", "guessedname": "_inject", "guessedtype": "function", "params": [{"type": "string", "name": "when", "description": "  before or after"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "detach": {"params": [{"type": "string", "name": "sid", "description": "  the subscription handle"}], "description": "Detach a before or after subscription", "guessedname": "detach", "guessedtype": "function"}, "after": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "static": "", "guessedname": "after", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "before": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method before the specified function", "static": "", "guessedname": "before", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}}, "static": "", "file": "event-do.js", "guessedtype": "property", "shortname": "Do", "properties": {"objs": {"static": "", "description": "Cache of objects touched by the utility", "guessedname": "objs", "guessedtype": "property"}}, "description": "Allows for the insertion of methods that are executed before or after\na specified method"}, "Anim": {"name": "Anim", "configs": {"node": {"type": "Node", "description": "The object to be animated.", "guessedname": "node", "guessedtype": "property"}, "direction": {"default": "\"normal\"", "type": "String", "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass.", "guessedname": "direction", "guessedtype": "property"}, "from": {"type": "Object", "description": "The starting values for the animated properties. \nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used.", "guessedname": "from", "guessedtype": "property"}, "iterations": {"default": "1", "type": "Int", "description": "The number of times the animation should run", "guessedname": "iterations", "guessedtype": "property"}, "iterationCount": {"description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called).", "default": "0", "readonly": "", "guessedname": "iterationCount", "guessedtype": "property", "type": "Int"}, "elapsedTime": {"description": "Current time the animation has been running.", "default": "0", "readonly": "", "guessedname": "elapsedTime", "guessedtype": "property", "type": "Int"}, "to": {"type": "Object", "description": "The ending values for the animated properties. \nFields may be strings, numbers, or functions.", "guessedname": "to", "guessedtype": "property"}, "running": {"description": "Whether or not the animation is currently running.", "default": "false", "readonly": "", "guessedname": "running", "guessedtype": "property", "type": "Boolean"}, "startTime": {"description": "Date stamp for the first frame of the animation.", "default": "0", "readonly": "", "guessedname": "startTime", "guessedtype": "property", "type": "Int"}, "duration": {"type": "NUM", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "easing": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"Easing.easeNone\".", "guessedname": "easing", "guessedtype": "property"}, "reverse": {"default": "false", "type": "Boolean", "description": "If true, animation begins from last frame", "guessedname": "reverse", "guessedtype": "property"}}, "description": "Handles animation _queueing and threading.", "constructors": [{"description": "Handles animation _queueing and threading."}], "namespace": "", "module": "anim", "properties": {"behaviors": {"static": "", "description": "Bucket for custom getters and setters", "guessedname": "behaviors", "guessedtype": "property"}, "DEFAULT_GETTER": {"static": "", "description": "The default getter to use when getting object properties.", "guessedname": "DEFAULT_GETTER", "guessedtype": "function"}, "DEFAULT_UNIT": {"static": "", "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test.", "guessedname": "DEFAULT_UNIT", "guessedtype": "property"}, "RE_DEFAULT_UNIT": {"static": "", "description": "Regex of properties that should use the default unit.", "guessedname": "RE_DEFAULT_UNIT", "guessedtype": "property"}, "DEFAULT_SETTER": {"static": "", "description": "The default setter to use when setting object properties.", "guessedname": "DEFAULT_SETTER", "guessedtype": "function"}}, "guessedname": "RUNNING", "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "property", "shortname": "Anim", "events": {"iterationCountChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "iterationCountChange", "description": "Fires when the value for the configuration attribute 'iterationCount' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "reverseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "reverseChange", "description": "Fires when the value for the configuration attribute 'reverse' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "end": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The end event."}], "description": "fires after the animation completes.", "guessedname": "END", "guessedtype": "property"}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "resume": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is resumed (run from pause)."}, "iteration": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The iteration event."}], "description": "fires when an animation begins an iteration."}, "toChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "iterationsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "iterationsChange", "description": "Fires when the value for the configuration attribute 'iterations' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tween": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The tween event."}], "description": "fires every frame of the animation.", "guessedname": "TWEEN", "guessedtype": "property"}, "start": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The start event."}], "description": "fires when an animation begins.", "guessedname": "START", "guessedtype": "property"}, "fromChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "pause": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is paused."}, "runningChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "runningChange", "description": "Fires when the value for the configuration attribute 'running' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "elapsedTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "elapsedTimeChange", "description": "Fires when the value for the configuration attribute 'elapsedTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"getBezier": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "static": "", "guessedname": "getBezier", "guessedtype": "function", "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}]}, "stop": {"chainable": "", "static": "", "description": "Stops all animation instances.", "guessedname": "stop", "guessedtype": "function"}, "pause": {"chainable": "", "static": "", "description": "Pauses all animation instances.", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "static": "", "description": "Runs all animation instances.", "guessedname": "run", "guessedtype": "function"}, "_runFrame": {"guessedname": "_runFrame", "static": "", "description": "Called per Interval to handle each animation frame.", "private": "", "guessedtype": "function"}}}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"guessedname": "_finalize", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}], "description": "Called by the the helper for detecting script load in Safari", "private": "", "guessedtype": "function"}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onTimeout<\/dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onFailure<\/dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted successfully<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>context<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>autopurge<\/dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<\/dl>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<dt>timeout<\/dt>\n<dd>Number of milliseconds to wait before aborting and firing the timeout event<\/dd>\n<pre>\n&nbsp;&nbsp;Y.Get.script(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.5.2\/build\/yahoo\/yahoo-min.js\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.5.2\/build\/event\/event-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because Y is the context\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.data); \/\/ foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.nodes.length === 2) \/\/ true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/ o.purge(); \/\/ optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onTimeout: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction timed out\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, \/\/ 10 second timeout\n&nbsp;&nbsp;&nbsp;&nbsp;context: Y, \/\/ make the YUI instance\n&nbsp;&nbsp;&nbsp;&nbsp;\/\/ win: otherframe \/\/ target another window\/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true \/\/ allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"guessedname": "_queue", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"params": [{"type": "string|object", "name": "o", "description": "  Either the tId or the object returned from\nscript() or css()"}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"guessedname": "_next", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "description": "Loads the next item for a given request", "private": "", "guessedtype": "function"}, "_timeout": {"guessedname": "_timeout", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "Timeout detected", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win<\/dl>\n<dd>the window the link nodes(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>context<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<\/dl>\n<pre>\nY.Get.css(\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\");\n<\/pre>\n<pre>\n&nbsp;&nbsp;Y.Get.css(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/logger\/assets\/skins\/sam\/logger.css\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;insertBefore: 'custom-styles' \/\/ nodes will be inserted before the specified node\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}}, "static": "", "file": "get.js", "guessedtype": "function", "shortname": "Get", "properties": {"queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "nidx": {"guessedname": "nidx", "type": "int", "description": "node index used to generate unique node ids", "private": "", "guessedtype": "property"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH", "default": "20", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "JSON": {"name": "JSON", "namespace": "", "module": "json", "methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.", "throws": "SyntaxError", "static": "", "guessedname": "parse", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values"}], "public": ""}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "Converts an arbitrary value to a JSON string representation.\nCyclical object or array references are replaced with null.\nIf a whitelist is provided, only matching object keys will be included.\nIf a depth limit is provided, objects and arrays at that depth will\nbe stringified as empty.", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary object to convert to JSON string"}, {"type": "Array|Function", "name": "w", "description": "  (optional) whitelist of acceptable object\nkeys to include, or a replacer function to modify the\nraw value before serialization"}, {"type": "number", "name": "d", "description": "  (optional) depth limit to recurse objects\/arrays\n(practical minimum 1)"}], "public": ""}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}], "guessedname": "_revive", "guessedtype": "function"}}, "static": "", "file": "json-parse.js", "shortname": "JSON", "properties": {"_INVALID": {"guessedname": "_INVALID", "type": "{RegExp}", "description": "Final step in the validation.  Regex used to test the string left after\nall previous replacements for invalid characters.", "private": "", "guessedtype": "property"}, "_BRACKETS": {"guessedname": "_BRACKETS", "type": "{RegExp}", "description": "Third step in the validation.  Regex used to remove all open square\nbrackets following a colon, comma, or at the beginning of the string.", "private": "", "guessedtype": "property"}, "_VALUES": {"guessedname": "_VALUES", "type": "{RegExp}", "description": "Second step in the validation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "guessedtype": "property"}, "_SPECIAL_CHARS": {"guessedname": "_SPECIAL_CHARS", "type": "{RegExp}", "description": "Regex used to capture characters that need escaping before enclosing\ntheir containing string in quotes.", "private": "", "guessedtype": "property"}, "_CHARS": {"description": "Character substitution map for common escapes and special characters.", "private": "", "static": "", "guessedname": "_CHARS", "guessedtype": "property", "type": "{Object}"}, "_ESCAPES": {"guessedname": "_ESCAPES", "type": "{RegExp}", "description": "First step in the validation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "guessedtype": "property"}, "_UNICODE_EXCEPTIONS": {"guessedname": "_UNICODE_EXCEPTIONS", "type": "{RegExp}", "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line endings--with\nescae sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.", "private": "", "guessedtype": "property"}}, "description": "The JSON Utility provides methods to serialize JavaScript objects into\nJSON strings and parse JavaScript objects from strings containing JSON data.\nThree modules are available for inclusion:\n<ol>\n<li>1. <code>json-parse<\/code> for parsing JSON strings into native JavaScript data<\/li>\n<li>2. <code>json-stringify<\/code> for stringification of JavaScript objects into JSON strings<\/li>\n<li>3. <code>json<\/code> for both parsing and stringification<\/li>\n<\/ol>\nBoth <code>json-parse<\/code> and <code>json-stringify<\/code> create functions in a static JSON class under your YUI instance (e.g. Y.JSON.parse(..))."}, "Selector": {"name": "Selector", "namespace": "", "module": "dom", "guessedname": "TAG", "methods": {"test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "static": "", "guessedname": "test", "guessedtype": "function", "params": [{"type": "HTMLElement | String", "name": "node", "description": " An id or node reference to the HTMLElement being tested."}, {"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}]}, "filter": {"return": {"type": "array", "description": "An array of nodes from the supplied array that match the given selector."}, "description": "Filters a set of nodes based on a given CSS selector.", "static": "", "guessedname": "filter", "guessedtype": "function", "params": [{"type": "array", "name": "nodes", "description": " A set of nodes\/ids to filter."}, {"type": "string", "name": "selector", "description": " The selector used to test each node."}]}, "_tokenize": {"description": "Break selector into token units per simple selector.\nCombinator is attached to left-hand selector.", "guessedname": "_tokenize", "guessedtype": "function"}, "query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement | String", "name": "root", "description": " optional An id or HTMLElement to start the query from. Defaults to Selector.document."}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}}, "static": "", "file": "selector.js", "guessedtype": "property", "shortname": "Selector", "properties": {"attrAliases": {"type": "object", "description": "Mapping of attributes to aliases, normally to work around HTMLAttributes\nthat conflict with JS reserved words.", "guessedname": "attrAliases", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "document": {"default": "window.document", "type": "object", "description": "Default document for use queries", "guessedname": "document", "guessedtype": "property"}, "shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "pseudos": {"type": "object", "description": "List of pseudo-classes and corresponding boolean functions. \nThese functions are called with the current node, and any value that was parsed with the pseudo regex.", "guessedname": "pseudos", "guessedtype": "property"}}, "description": "Provides helper methods for collecting and filtering DOM elements."}, "Drag": {"name": "Drag", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to initiate a drag operation", "guessedname": "node", "guessedtype": "property"}, "activeHandle": {"type": "Node", "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.", "guessedname": "activeHandle", "guessedtype": "property"}, "dragNode": {"type": "Node", "description": "Y.Node instanace to use as the draggable element, defaults to node", "guessedname": "dragNode", "guessedtype": "property"}, "move": {"type": "Boolean", "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element.", "guessedname": "move", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable.", "guessedname": "target", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drag element so that it can't be dragged: default false.", "guessedname": "lock", "guessedtype": "property"}, "offsetNode": {"type": "Boolean", "description": "Offset the drag element by the difference in cursor position: default true", "guessedname": "offsetNode", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle", "guessedname": "handles", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drag into.", "guessedname": "groups", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base.", "guessedname": "useShim", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of this Drag instance.", "guessedname": "dragMode", "guessedtype": "property"}, "dragging": {"type": "Boolean", "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change.", "guessedname": "dragging", "guessedtype": "property"}, "data": {"type": "Mixed", "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value.", "guessedname": "data", "guessedtype": "property"}, "primaryButtonOnly": {"type": "Boolean", "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag.", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "constructors": [{"description": "This class provides the ability to drag a Node."}], "namespace": "", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "{Array}", "description": "Storage Array for the groups this drag belongs to.", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "{Object}", "description": "A private hash of the valid drag handles", "private": "", "guessedtype": "property"}, "_invalids": {"guessedname": "_invalids", "type": "{Object}", "description": "A private hash of the invalid selector strings", "private": "", "guessedtype": "property"}, "_clickTimeout": {"guessedname": "_clickTimeout", "type": "{Boolean}", "description": "Holder for the setTimeout call", "private": "", "guessedtype": "property"}, "_ev_md": {"guessedname": "_ev_md", "type": "{Event}", "description": "A private reference to the mousedown DOM event", "private": "", "guessedtype": "property"}, "target": {"type": "{Object}", "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..", "guessedname": "target", "guessedtype": "property"}, "mouseXY": {"type": "{Array}", "description": "The XY coords of the mousemove", "guessedname": "mouseXY", "guessedtype": "property"}, "_startTime": {"guessedname": "_startTime", "type": "Date", "description": "The getTime of the mousedown event. Not used, just here in case someone wants\/needs to use it.", "private": "", "guessedtype": "property"}, "_endTime": {"guessedname": "_endTime", "type": "Date", "description": "The getTime of the mouseup event. Not used, just here in case someone wants\/needs to use it.", "private": "", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this drag, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "_dragThreshMet": {"guessedname": "_dragThreshMet", "type": "{Boolean}", "description": "Private flag to see if the drag threshhold was met", "private": "", "guessedtype": "property"}, "startXY": {"type": "{Array}", "description": "The initial mouse position", "guessedname": "startXY", "guessedtype": "property"}, "nodeXY": {"type": "{Array}", "description": "The initial element position", "guessedname": "nodeXY", "guessedtype": "property"}, "deltaXY": {"type": "{Array}", "description": "The offset of the mouse position to the element's position", "guessedname": "deltaXY", "guessedtype": "property"}, "_invalidsDefault": {"guessedname": "_invalidsDefault", "type": "{Object}", "description": "A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true}", "private": "", "guessedtype": "property"}, "lastXY": {"type": "{Array}", "description": "The position of the element as it's moving (for offset calculations)", "guessedname": "lastXY", "guessedtype": "property"}, "_fromTimeout": {"guessedname": "_fromTimeout", "type": "{Boolean}", "description": "Flag to determine if the drag operation came from a timeout", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}}, "guessedname": "DDM", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drag instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to add this Drag Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_setStartPosition": {"guessedname": "_setStartPosition", "params": [{"type": "Array", "name": "xy", "description": " The XY coords to set the position to."}], "description": "Sets the current position of the Element and calculates the offset", "private": "", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "_move": {"guessedname": "_move", "params": [{"type": "Event", "name": "ev", "description": " The mousemove DOM event"}], "description": "Fired from DragDropMgr (DDM) on mousemove.", "private": "", "guessedtype": "function"}, "validClick": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.", "guessedname": "validClick", "guessedtype": "function"}, "removeInvalid": {"return": {"type": "Self", "description": ""}, "description": "Remove an invalid handle added by addInvalid", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The invalid handle to remove from the internal list."}], "guessedname": "removeInvalid", "guessedtype": "function"}, "addHandle": {"return": {"type": "Self", "description": ""}, "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector to test for a valid handle. Must be a child of the element."}], "guessedname": "addHandle", "guessedtype": "function"}, "initializer": {"description": "Internal init handler", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "removeHandle": {"return": {"type": "Self", "description": ""}, "description": "Remove a Selector added by addHandle", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector for the handle to be removed."}], "guessedname": "removeHandle", "guessedtype": "function"}, "_handleMouseDownEvent": {"guessedname": "_handleMouseDownEvent", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "end": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Ends the drag operation", "guessedname": "end", "guessedtype": "function"}, "_moveNode": {"guessedname": "_moveNode", "params": [{"type": "Array", "name": "eXY", "description": " The XY to move the element to, usually comes from the mousemove DOM event."}, {"type": "Boolean", "name": "noFire", "description": " If true, the drag:drag event will not fire."}], "description": "This method performs the actual element move.", "private": "", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "start": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Starts the drag operation", "guessedname": "start", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleMouseDown": {"guessedname": "_handleMouseDown", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "_timeoutCheck": {"description": "The method passed to setTimeout to determine if the clickTimeThreshold was met.", "private": "", "guessedname": "_timeoutCheck", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drag instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drag Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_fixIEMouseUp": {"description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document.", "private": "", "guessedname": "_fixIEMouseUp", "guessedtype": "function"}, "_prep": {"description": "Attach event listners and add classname", "private": "", "guessedname": "_prep", "guessedtype": "function"}, "addInvalid": {"return": {"type": "Self", "description": ""}, "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector to test against to determine if this is an invalid drag handle."}], "guessedname": "addInvalid", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [], "description": "Handler for the mouseup DOM event", "private": "", "guessedtype": "function"}, "_align": {"return": {"type": "", "description": "Array"}, "description": "Calculates the offsets and set's the XY that the element will move to.", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The xy coords to align with."}], "guessedname": "_align", "guessedtype": "function", "type": "{Array}"}, "_handleTarget": {"return": {"type": "Boolean\/Object", "description": ""}, "description": "Attribute handler for the target config attribute.", "private": "", "params": [], "guessedname": "_handleTarget", "guessedtype": "function"}, "_unprep": {"description": "Detach event listners and remove classname", "private": "", "guessedname": "_unprep", "guessedtype": "function"}, "_fixIEMouseDown": {"description": "This method copies the onselectstart listner on the document to the _ieSelectFix property", "private": "", "guessedname": "_fixIEMouseDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "drag.js", "guessedtype": "property", "shortname": "Drag", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:afterMouseDown": {"description": "Fires after the mousedown event has been cleared.", "params": [{"type": "Event", "name": "ev", "description": " The mousedown event."}], "guessedname": "EV_AFTER_MOUSE_DOWN", "guessedtype": "property", "bubbles": "DDM", "type": "Event.Custom"}, "offsetNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "offsetNodeChange", "description": "Fires when the value for the configuration attribute 'offsetNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "draggingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "draggingChange", "description": "Fires when the value for the configuration attribute 'dragging' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:removeInvalid": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after an invalid selector is removed.", "guessedname": "EV_REMOVE_INVALID", "guessedtype": "property"}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "primaryButtonOnlyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "primaryButtonOnlyChange", "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:mouseDown": {"description": "Handles the mousedown DOM event, checks to see if you have a valid handle then starts the drag timers.", "params": [{"type": "Event", "name": "ev", "description": " The mousedown event."}], "guessedname": "EV_MOUSE_DOWN", "guessedtype": "property", "preventable": "_handleMouseDown", "bubbles": "DDM", "type": "Event.Custom"}, "drag:addHandle": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after a handle is added.", "guessedname": "EV_ADD_HANDLE", "guessedtype": "property"}, "drag:removeHandle": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after a handle is removed.", "guessedname": "EV_REMOVE_HANDLE", "guessedtype": "property"}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:start": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires at the start of a drag operation.", "guessedname": "EV_START", "guessedtype": "property"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:enter": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node enters a Drop Target. (Fired from dd-drop)"}, "drag:addInvalid": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after an invalid selector is added.", "guessedname": "EV_ADD_INVALID", "guessedtype": "property"}, "drag:drag": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires every mousemove during a drag operation.", "guessedname": "EV_DRAG", "guessedtype": "property"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:drophit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node is dropped on a valid Drop Target. (Fired from dd-ddm-drop)"}, "drag:dropmiss": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node is dropped on an invalid Drop Target. (Fired from dd-ddm-drop)", "guessedname": "Drag", "guessedtype": "function"}, "drag:over": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node is over a Drop Target. (Fired from dd-drop)"}, "drag:exit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node exits a Drop Target. (Fired from dd-drop)"}, "moveChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "moveChange", "description": "Fires when the value for the configuration attribute 'move' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:end": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires at the end of a drag operation.", "guessedname": "EV_END", "guessedtype": "property"}}, "description": "This class provides the ability to drag a Node."}, "Base": {"name": "Base", "configs": {"destroyed": {"description": "Flag indicating whether or not this object\nhas been through the destroy lifecycle phase.", "default": "false", "readonly": "", "guessedname": "destroyed", "guessedtype": "property", "type": "boolean"}, "initialized": {"description": "Flag indicating whether or not this object\nhas been through the init lifecycle phase.", "default": "false", "readonly": "", "guessedname": "intialized", "guessedtype": "property", "type": "boolean"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "description": "<p>\nProvides a base class for managed attribute based\nobjects, which handles the chaining of initializer and destructor methods\nacross the hierarchy during init and destroy lifecycle methods and \nhandles automatic configuration of registered Attributes, through \nthe static <a href=\"#property_ATTRS\">ATTRS<\/a> property.\n<\/p>\n<p>The Base class also handles prefixing of event types with the static <a href=\"#property_NAME\">NAME<\/a> \nproperty for all events fired from instances of classes derived from Base.<\/p>"}], "namespace": "", "module": "base", "events": {"destroy": {"preventable": "_defDestroyFn", "params": [{"type": "Event.Facade", "name": "e", "description": " Event object"}], "description": "<p>\nDestroy event, fired prior to destruction. Invoking\nthe preventDefault method on the event object provided \nto subscribers will prevent destruction from proceeding.\n<\/p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter destruction is complete (and as a result cannot prevent\ndestruction).\n<\/p>"}, "destroyedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "destroyedChange", "description": "Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "init": {"preventable": "_defInitFn", "params": [{"type": "Event.Facade", "name": "e", "description": " Event object"}, {"type": "", "name": "config", "description": " Object literal of configuration name\/value pairs"}], "description": "<p>\nInit event, fired prior to initialization. Invoking\nthe preventDefault method on the event object provided \nto subscribers will prevent initialization from occuring.\n<\/p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n<\/p>"}, "initializedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "initializedChange", "description": "Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Base", "methods": {"_prefixEvtType": {"return": {"type": "String", "description": "The prefixed event name"}, "description": "Utility method to prefix the event name with the\nname property of the instance, if absent", "private": "", "params": [{"type": "String", "name": "type", "description": " The event name"}], "guessedname": "_prefixEvtType", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "String representation for this object"}, "description": "Default toString implementation. Provides the constructor NAME\nand the instance ID.", "guessedname": "toString", "guessedtype": "function"}, "_defInitFn": {"protected": "", "params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "description": "Default init event handler", "guessedname": "_defInitFn", "guessedtype": "function"}, "subscribe": {"return": {"type": "Event.Handle", "description": "An event handle which can be used to unsubscribe the subscribed callback."}, "params": [{"type": "String", "name": "type", "description": " The type of event to subscribe to. If \nthe type string does not contain a prefix (\"prefix:eventType\"), \nthe name property of the instance will be used as the default prefix."}, {"type": "Function", "name": "fn", "description": " The subscribed callback function, invoked when the event is fired."}, {"type": "Object", "name": "context", "description": " Optional execution context for the callback."}, {"type": "Any*", "name": "args*", "description": " 0..n params to supply to the callback"}], "description": "<p>\nSubscribe to a custom event hosted by this object.\n<\/p>\n<p>\nOverrides Event.Target's <a href=\"Event.Target.html#method_subscribe\">subscribe<\/a> method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "subscribe", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "The return value from Event Target's <a href=\"Event.Target.html#method_fire\">fire<\/a> method."}, "params": [{"type": "String|Object", "name": "type", "description": " The type of the event, or an object that contains\na 'type' property. If the type does not contain a prefix (\"prefix:eventType\"),\nthe name property of the instance will be used as the default prefix."}, {"type": "Any*", "name": "args*", "description": " 0..n Additional arguments to pass to subscribers."}], "description": "<p>\nFire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\n<\/p>\n<p>\nOverrides Event.Target's <a href=\"Event.Target.html#method_fire\">fire<\/a> method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "fire", "guessedtype": "function"}, "create": {"return": {"type": "Object", "description": "An instance of the custom class"}, "description": "<p>\nCreates a new object instance, based on a dynamically created custom class.\nThe custom class is created from the main class passed in as the first parameter \nalong with the list of extension classes passed in\nas the second parameter using <a href=\"#method_build\">Base.build<\/a> \nwith \"dynamic\" set to true. See the documentation for this method \nto see how the main class and extension classes are used.\n<\/p>\n<p>Any arguments following the 2nd argument are passed as arguments to the \nconstructor of the newly created class used to create the instance.<\/p>", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "Function", "name": "main", "description": " The main class on which the instance it to be \nbased. This class will be extended to create the class for the custom instance"}, {"type": "Array", "name": "extensions", "description": " The list of extension classes used to augment the\nmain class with."}, {"type": "Any*", "name": "args*", "description": " 0..n arguments to pass to the constructor of the \nnewly created class, when creating the instance."}]}, "after": {"return": {"type": "Event.Handle", "description": "Event handle which can be used to unsubscribe the subscribed callback."}, "params": [{"type": "String", "name": "type", "description": " The type of event to subscribe to. If \nthe type string does not contain a prefix (\"prefix:eventType\"), \nthe name property of the instance will be used as the default prefix."}, {"type": "Function", "name": "fn", "description": "  The subscribed callback function"}, {"type": "Object", "name": "context", "description": " Optional execution context for the callback"}, {"type": "Any*", "name": "args*", "description": " 0..n params to supply to the callback"}], "description": "<p>\nSubscribe to a custom event hosted by this object.  The\nsupplied callback will execute <em>after<\/em> any listeners added\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.\n<\/p>\n<p>\nOverrides Event.Target's <a href=\"Event.Target.html#method_after\">after<\/a> method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "after", "guessedtype": "function"}, "publish": {"return": {"type": "Event.Custom", "description": "The published custom event object"}, "params": [{"type": "String", "name": "type", "description": "  The type, or name of the event. If the type does not \ncontain a prefix (\"prefix:eventType\"), the name property of the instance will \nbe used as the default prefix."}, {"type": "Object", "name": "opts", "description": " Optional config params (see Event.Target <a href=\"Event.Target.html#method_publish\">publish<\/a> for details)"}], "description": "<p>\nCreates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned. \n<\/p>\n<p>\nOverrides Event.Target's <a href=\"Event.Target.html#method_publish\">publish<\/a> method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "publish", "guessedtype": "function"}, "_destroyHierarchy": {"private": "", "description": "Destroys the class hierarchy rooted at this base class by invoking\nthe descructor method on the prototype of each class in the hierarchy.", "guessedname": "_destroyHierarchy", "guessedtype": "function"}, "init": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to invoking initializers on\nthe class hierarchy.", "chainable": "", "params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "guessedname": "init", "guessedtype": "function", "final": ""}, "_defDestroyFn": {"protected": "", "description": "Default destroy event handler", "guessedname": "_defDestroyFn", "guessedtype": "function"}, "_getClasses": {"protected": "", "return": {"type": "Function[]", "description": "An Array of classes (constructor functions), making up the class heirarchy for this object"}, "description": "Returns the top down class hierarchy for this object,\nwith Base being the first class in the array.", "guessedname": "_getClasses", "guessedtype": "function"}, "build": {"return": {"type": "Function", "description": "A custom class, created from the provided main and extension classes"}, "description": "<p>\nBuilds a constructor function (class) from the\nmain function, and array of extension functions (classes)\nprovided.\n<\/p>\n<p>\nThe cfg object literal supports the following properties\n<\/p>\n<dl>\n<dt>dynamic &#60;boolean&#62;<\/dt>\n<dd>\n<p>If true, a completely new class\nis created which extends the main class, and acts as the \nhost on which the extension classes are augmented.<\/p>\n<p>If false, the extensions classes are augmented directly to\nthe main class, modifying the main classes prototype.<\/p>\n<\/dd>\n<dt>aggregates &#60;String[]&#62;<\/dt>\n<dd>An array of static property names, which will get aggregated\non to the built class in addition to the default properties build \nwill always aggregate - \"ATTRS\" and \"PLUGINS\", as defined by \nBase.build.AGGREGATES<\/dd>\n<\/dl>", "static": "", "guessedname": "build", "guessedtype": "function", "params": [{"type": "Function", "name": "main", "description": " The main class on which to base the built class"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will be\naugmented\/aggregated to the built class."}, {"type": "Object", "name": "cfg", "description": ""}]}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "String|Object", "name": "type", "description": " Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events. If \nthe type string does not contain a prefix \n(\"prefix:eventType\"), the name property of the \ninstance will be used as the default prefix."}, {"type": "Function", "name": "fn", "description": " The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": " The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "<p>\nUnsubscribes one or more listeners the from the specified event.\n<\/p>\n<p>\nOverrides Event.Target's <a href=\"Event.Target.html#method_unsubscribe\">unsubscribe<\/a> method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "unsubscribe", "guessedtype": "function"}, "destroy": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\n<\/p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n<\/p>", "chainable": "", "guessedname": "destroy", "guessedtype": "function", "final": ""}, "_initHierarchy": {"guessedname": "_initHierarchy", "params": [{"type": "Object", "name": "userConf", "description": " Object literal containing attribute name\/value pairs"}], "description": "Initializes the class hierarchy rooted at this base class,\nwhich includes initializing attributes for each class defined \nin the class's static <a href=\"#property_ATTRS\">ATTRS<\/a> property and invoking the initializer \nmethod on the prototype of each class in the hierarchy.", "private": "", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "params": [{"type": "String", "name": "type", "description": " The type, or name of the event. If \nthe type string does not contain a prefix (\"prefix:eventType\"), \nthe name property of the instance will be used as the default prefix"}], "description": "<p>\nRemoves all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.\n<\/p>\n<p>\nOverrides Event.Target's <a href=\"Event.Target.html#method_unsubscribeAll\">unsubscribeAll<\/a> method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "unsubscribeAll", "guessedtype": "function"}}, "uses": ["Attribute"], "file": "Base.js", "guessedtype": "function", "shortname": "Base", "properties": {"NAME": {"type": "String", "static": "", "description": "<p>\nName string to be used to identify instances of \nthis class, for example in prefixing events.\n<\/p>\n<p>\nClasses extending Base, should define their own\nstatic NAME property.\n<\/p>", "guessedname": "NAME", "guessedtype": "property"}, "name": {"type": "String", "description": "The name string to be used to identify \nthis instance of object.", "guessedname": "name", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Object literal defining the set of attributes which\nwill be available for instances of this class, and \nhow they are configured. See Attributes addAtt method\nfor a description of configuration options available \nfor each attribute.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p>\nProvides a base class for managed attribute based\nobjects, which handles the chaining of initializer and destructor methods\nacross the hierarchy during init and destroy lifecycle methods and \nhandles automatic configuration of registered Attributes, through \nthe static <a href=\"#property_ATTRS\">ATTRS<\/a> property.\n<\/p>\n<p>The Base class also handles prefixing of event types with the static <a href=\"#property_NAME\">NAME<\/a> \nproperty for all events fired from instances of classes derived from Base.<\/p>"}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "Cookie", "methods": {"setSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a sub cookie with a given name to a particular value.", "static": "", "guessedname": "setSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."}]}, "_parseCookieHash": {"return": {"type": "Object", "description": "An object containing entries for each cookie value."}, "description": "Parses a cookie hash string into an object.", "private": "", "static": "", "guessedname": "_parseCookieHash", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie hash string to parse (format: n1=v1&n2=v2)."}]}, "set": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name and value.", "static": "", "guessedname": "set", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set for the cookie."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."}]}, "setSubs": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name to contain a hash of name-value pairs.", "static": "", "guessedname": "setSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Object", "name": "value", "description": " An object containing name-value pairs."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."}]}, "get": {"return": {"type": "Variant", "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."}, "description": "Returns the cookie value for the given name.", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_parseCookieString": {"return": {"type": "Object", "description": "An object containing entries for each accessible cookie."}, "description": "Parses a cookie string into an object representing all accessible cookies.", "private": "", "static": "", "guessedname": "_parseCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie string to parse."}, {"type": "Boolean", "name": "shouldDecode", "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."}]}, "remove": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.", "static": "", "guessedname": "remove", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), \nand secure (true\/false). The expires option will be overwritten\nby the method."}]}, "removeSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a sub cookie with a given name.", "static": "", "guessedname": "removeSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie in which the subcookie exists."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false). This must be the same settings as the original\nsubcookie."}]}, "_createCookieHashString": {"return": {"type": "String", "description": "A string suitable for use as a cookie value."}, "description": "Formats a cookie value for an object containing multiple values.", "private": "", "static": "", "guessedname": "_createCookieHashString", "guessedtype": "function", "params": [{"type": "Object", "name": "hash", "description": " An object of key-value pairs to create a string for."}]}, "getSubs": {"return": {"type": "Object", "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."}, "description": "Returns an object containing name-value pairs stored in the cookie with the given name.", "static": "", "guessedname": "getSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}]}, "getSub": {"return": {"type": "Variant", "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."}, "description": "Returns the value of a subcookie.", "static": "", "guessedname": "getSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_createCookieString": {"return": {"type": "String", "description": "The formatted cookie string."}, "description": "Creates a cookie string that can be assigned into document.cookie.", "private": "", "static": "", "guessedname": "_createCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie."}, {"type": "String", "name": "value", "description": " The value of the cookie."}, {"type": "encodeValue", "name": "encodeValue", "description": " True to encode the value, false to leave as-is."}, {"type": "Object", "name": "options", "description": " (Optional) Options for the cookie."}]}}, "static": "", "file": "Cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Cookie utility."}, "Proxy": {"name": "Proxy", "constructors": [{"description": "This class extends dd-drag to allow for creating a proxy drag node, instead of dragging the original node."}], "namespace": "", "module": "dd", "events": {"moveOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "moveOnEndChange", "description": "Fires when the value for the configuration attribute 'moveOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "borderStyleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "borderStyleChange", "description": "Fires when the value for the configuration attribute 'borderStyle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "proxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "positionProxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "positionProxyChange", "description": "Fires when the value for the configuration attribute 'positionProxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "resizeFrameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "resizeFrameChange", "description": "Fires when the value for the configuration attribute 'resizeFrame' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDM", "methods": {"_setFrame": {"description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.", "private": "", "guessedname": "_setFrame", "guessedtype": "function"}, "end": {"description": "Ends the drag operation, if moveOnEnd is set it will position the Drag Element to the new location of the proxy.", "guessedname": "end", "guessedtype": "function"}, "start": {"description": "Starts the drag operation and sets the dragNode config option.", "guessedname": "start", "guessedtype": "function"}, "_createFrame": {"description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value", "private": "", "guessedname": "_createFrame", "guessedtype": "function"}, "initializer": {"description": "Lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Drag", "superclass": "Drag", "file": "proxy.js", "guessedtype": "property", "shortname": "Proxy", "configs": {"borderStyle": {"type": "Boolean", "description": "The default border style for the border of the proxy. Default: 1px solid #808080", "guessedname": "borderStyle", "guessedtype": "property"}, "positionProxy": {"type": "Boolean", "description": "Make the Proxy node appear in the same place as the original node. Default: true", "guessedname": "positionProxy", "guessedtype": "property"}, "resizeFrame": {"type": "Boolean", "description": "Make the Proxy node assume the size of the original node. Default: true", "guessedname": "resizeFrame", "guessedtype": "property"}, "proxy": {"type": "Boolean", "description": "Make this Draggable instance a Proxy instance. Default: false", "guessedname": "proxy", "guessedtype": "property"}, "moveOnEnd": {"type": "Boolean", "description": "Move the original node at the end of the drag. Default: true", "guessedname": "moveOnEnd", "guessedtype": "property"}}, "description": "This class extends dd-drag to allow for creating a proxy drag node, instead of dragging the original node."}, "Event.Target": {"description": "Event.Target is designed to be used with Y.augment to wrap \nEvent.Custom in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all.", "namespace": "", "module": "event", "guessedname": "EventTarget", "methods": {"getEvent": {"return": {"type": "Event.Custom", "description": "the custom event or null"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "guessedname": "getEvent", "guessedtype": "function"}, "removeTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "the return value from Event.Custom.fire"}, "params": [{"type": "String|Object", "name": "type", "description": "  The type of the event, or an object that contains\na 'type' property."}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't \nbeen published and it has no subscribers.  For performance sake, we \nimmediate exit in this case.  This means the event won't bubble, so \nif the intention is that a bubble target be notified, the event must \nbe published on this object first.", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "", "name": "context", "description": " The execution context"}, {"type": "", "name": "args*", "description": " 1..n params to supply to the callback"}], "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.", "guessedname": "after", "guessedtype": "function"}, "publish": {"return": {"type": "Event.Custom", "description": "the custom event"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\n'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)\n<\/li>\n<li>\n'bubbles': whether or not this event bubbles (true)\n<\/li>\n<li>\n'context': the default execution context for the listeners (this)\n<\/li>\n<li>\n'defaultFn': the default function to execute when this event fires if preventDefault was not called\n<\/li>\n<li>\n'emitFacade': whether or not this event emits a facade (false)\n<\/li>\n<li>\n'fireOnce': if an event is configured to fire once, new subscribers after\nthe fire will be notified immediately.\n<\/li>\n<li>\n'preventable': whether or not preventDefault() has an effect (true)\n<\/li>\n<li>\n'preventedFn': a function that is executed when preventDefault is called\n<\/li>\n<li>\n'queuable': whether or not this event can be queued during bubbling (false)\n<\/li>\n<li>\n'silent': if silent is true, debug messages are not provided for this event.\n<\/li>\n<li>\n'stoppedFn': a function that is executed when stopPropagation is called\n<\/li>\n<li>\n'type': the event type (valid option if not provided as the first parameter to publish)\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "publish", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "", "name": "context", "description": " The execution context"}, {"type": "", "name": "args*", "description": " 1..n params to supply to the callback"}], "description": "Subscribe to a custom event hosted by this object", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "ready": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "Function", "name": "f", "description": "  the function to execute"}, {"type": "", "name": "c", "description": " Optional execution context"}, {"type": "", "name": "args*", "description": " 0..n Additional arguments to append \nto the signature provided when the event fires."}], "description": "Subscribes to the yui:load event, which fires when a Y.use operation\nis complete."}, "addTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to add"}], "description": "Registers another Event.Target as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.", "guessedname": "addTarget", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event to propagate"}], "description": "Propagate an event", "guessedname": "bubble", "guessedtype": "function"}}, "file": "event-target.js", "guessedtype": "function", "shortname": "Event.Target", "name": "Event.Target"}, "Lang": {"name": "Lang", "namespace": "", "module": "yui", "guessedname": "Lang", "methods": {"isArray": {"return": {"type": "boolean", "description": "true if o is an array"}, "description": "Determines whether or not the provided object is an array.\nTesting typeof\/instanceof\/constructor of arrays across frame \nboundaries isn't possible in Safari unless you have a reference\nto the other frame to test against its Array prototype.  To\nhandle this case, we test well-known array properties instead.\nproperties.", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}], "todo": "can we kill this cross frame hack?"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "static": "", "guessedname": "trim", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim"}]}, "isDate": {"return": {"type": "boolean", "description": "true if o is a date"}, "description": "Determines whether or not the supplied object is a date instance", "static": "", "guessedname": "isDate", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isString": {"return": {"type": "boolean", "description": "true if o is a string"}, "description": "Determines whether or not the provided object is a string", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isBoolean": {"return": {"type": "boolean", "description": "true if o is a boolean"}, "description": "Determines whether or not the provided object is a boolean", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isNull": {"return": {"type": "boolean", "description": "true if o is null"}, "description": "Determines whether or not the provided object is null", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null\/undefined\/NaN || false"}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''", "static": "", "guessedname": "isValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The item to test"}]}, "isFunction": {"return": {"type": "boolean", "description": "true if o is a function"}, "description": "Determines whether or not the provided object is a function", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isNumber": {"return": {"type": "boolean", "description": "true if o is a number"}, "description": "Determines whether or not the provided object is a legal number", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isObject": {"return": {"type": "boolean", "description": "true if o is an object"}, "description": "Determines whether or not the provided object is of type object\nor function", "static": "", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function"}]}, "isUndefined": {"return": {"type": "boolean", "description": "true if o is undefined"}, "description": "Determines whether or not the provided object is undefined", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}}, "static": "", "file": "yui-lang.js", "guessedtype": "property", "shortname": "Lang", "description": "Provides the language utilites and extensions used by the library"}, "DragPlugin": {"name": "DragPlugin", "constructors": [{"description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}], "namespace": "", "module": "dd-plugin", "guessedname": "Plugin", "extends": "Drag", "superclass": "Drag", "file": "dd-plugin.js", "guessedtype": "property", "shortname": "DragPlugin", "properties": {"NS": {"type": "{String}", "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}, "Do.AlterArgs": {"description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic.", "namespace": "", "module": "event", "guessedname": "AlterArgs", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.AlterArgs", "name": "Do.AlterArgs"}, "Event.Handle": {"name": "Event.Handle", "constructors": [{"params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event"}, {"type": "Event.Subscriber", "name": "sub", "description": "  the subscriber"}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "event", "guessedname": "EventHandle", "methods": {"detach": {"description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Handle", "properties": {"evt": {"type": "Event.Custom", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Event.Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "Drop": {"name": "Drop", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to make a Drop Target", "guessedname": "node", "guessedtype": "property"}, "padding": {"type": "String", "description": "CSS style padding to make the Drop Target bigger than the node.", "guessedname": "padding", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drop into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drop element.", "guessedname": "lock", "guessedtype": "property"}}, "constructors": [{"description": "This class provides the ability to create a Drop Target."}], "namespace": "", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "Array", "description": "The groups this target belongs to.", "private": "", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this target, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "overTarget": {"type": "Boolean", "description": "This flag is tripped when a drag element is over this target.", "guessedname": "overTarget", "guessedtype": "property"}, "_valid": {"guessedname": "_valid", "type": "Boolean", "description": "Flag for determining if the target is valid in this operation.", "private": "", "guessedtype": "property"}, "shim": {"type": "{Object}", "description": "Node reference to the targets shim", "guessedname": "shim", "guessedtype": "property"}}, "guessedname": "NODE", "methods": {"_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleOverTarget": {"description": "This handles the over target call made from this object or from the DDM", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "_handleOverEvent": {"description": "Handles the mouseover DOM event on the Target Shim", "private": "", "guessedname": "_handleOverEvent", "guessedtype": "function"}, "sizeShim": {"description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..", "guessedname": "sizeShim", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_createShim": {"description": "Creates the Target shim and adds it to the DDM's playground..", "private": "", "guessedname": "_createShim", "guessedtype": "function"}, "inGroup": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "Array", "name": "groups", "description": " The groups to check against"}], "description": "Check if this target is in one of the supplied groups.", "guessedname": "inGroup", "guessedtype": "function"}, "_activateShim": {"description": "Activates the shim and adds some interaction CSS classes", "private": "", "guessedname": "_activateShim", "guessedtype": "function"}, "_deactivateShim": {"description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]", "private": "", "guessedname": "_deactivateShim", "guessedtype": "function"}, "initializer": {"description": "Private lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_handleOut": {"description": "Handles the mouseout DOM event on the Target Shim", "private": "", "guessedname": "_handleOutEvent", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "drop.js", "guessedtype": "property", "shortname": "Drop", "events": {"paddingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "paddingChange", "description": "Fires when the value for the configuration attribute 'padding' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:enter": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a drag element enters this target.", "guessedname": "EV_DROP_ENTER", "guessedtype": "property"}, "drop:over": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a drag element is over this target.", "guessedname": "EV_DROP_OVER", "guessedtype": "property"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:hit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a draggable node is dropped on this Drop Target. (Fired from dd-ddm-drop)", "guessedname": "Drop", "guessedtype": "function"}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:exit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a drag element exits this target.", "guessedname": "EV_DROP_EXIT", "guessedtype": "property"}}, "description": "This class provides the ability to create a Drop Target."}, "DragConstained": {"properties": {"_regionCache": {"guessedname": "_regionCache", "type": "Object", "description": "Store a cache of the region that we are constraining to", "private": "", "guessedtype": "property"}}, "name": "DragConstained", "constructors": [{"description": "This class extends the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}], "namespace": "", "module": "dd", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickXArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickXArrayChange", "description": "Fires when the value for the configuration attribute 'tickXArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "gutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "constrain2nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "stickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "stickYChange", "description": "Fires when the value for the configuration attribute 'stickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickYArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickYArrayChange", "description": "Fires when the value for the configuration attribute 'tickYArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "stickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "stickXChange", "description": "Fires when the value for the configuration attribute 'stickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "constrain2regionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DRAG_NODE", "methods": {"_calcTickArray": {"return": {"type": "", "description": "The tick position"}, "description": "This method is used with the tickXArray and tickYArray config options", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "ticks", "description": " The array containing our custom tick positions."}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTickArray", "guessedtype": "function"}, "_checkRegion": {"return": {"type": "Array", "description": "The new XY that is inside the region"}, "description": "", "private": "", "params": [{"type": "Array", "name": "_xy", "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."}], "guessedname": "_checkRegion", "guessedtype": "function"}, "_align": {"return": {"type": "Array", "description": "The modified XY coords."}, "description": "Override of Drag _align to account for region checking and tick checking", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY to check for ticks and region"}], "guessedname": "_align", "guessedtype": "function"}, "_checkTicks": {"return": {"type": "Array", "description": "The calced XY coords"}, "description": "This method delegates the proper helper method for tick calculations", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY coords for the Drag"}, {"type": "Object", "name": "r", "description": " The optional region that we are bound to."}], "guessedname": "_checkTicks", "guessedtype": "function"}, "_calcTicks": {"return": {"type": "Number", "description": "The new position based on the tick calculation"}, "description": "Helper method to calculate the tick offsets for a given position", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "start", "description": " The start X or Y position"}, {"type": "Number", "name": "tick", "description": " The X or Y tick increment"}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTicks", "guessedtype": "function"}, "getRegion": {"return": {"type": "Object", "description": ""}, "params": [{"type": "Boolean", "name": "inc", "description": " Include the node's height and width"}], "description": "Get the active region: viewport, node, custom region", "guessedname": "getRegion", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if the XY is inside the region, false otherwise."}, "params": [{"type": "Array", "name": "xy", "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."}], "description": "Checks if the XY passed or the dragNode is inside the active region.", "guessedname": "inRegion", "guessedtype": "function"}, "_cacheRegion": {"description": "Get's the region and caches it, called from window.resize and when the cache is null", "private": "", "guessedname": "_cacheRegion", "guessedtype": "function"}}, "extends": "Drag", "superclass": "Drag", "file": "constrain.js", "guessedtype": "property", "shortname": "DragConstained", "configs": {"tickX": {"type": "Number\/false", "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"type": "Number\/false", "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickY", "guessedtype": "property"}, "constrain2region": {"type": "Object", "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "tickYArray": {"type": "Array", "description": "An array of page coordinates to use as Y ticks for drag movement.", "guessedname": "tickYArray", "guessedtype": "property"}, "constrain2node": {"type": "Object", "description": "Will attempt to constrain the drag node to the bounderies of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "stickX": {"type": "Boolean", "description": "Stick the drag movement to the X-Axis. Default: false", "guessedname": "stickX", "guessedtype": "property"}, "stickY": {"type": "Boolean", "description": "Stick the drag movement to the Y-Axis", "guessedname": "stickY", "guessedtype": "property"}, "gutter": {"type": "String", "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "gutter", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the drag node to the bounderies of the viewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "tickXArray": {"type": "Array", "description": "An array of page coordinates to use as X ticks for drag movement.", "guessedname": "tickXArray", "guessedtype": "property"}}, "description": "This class extends the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}, "Event.Facade": {"file": "event-facade.js", "name": "Event.Facade", "namespace": "", "param": "ev {Event} the DOM event", "methods": {"stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "module": "event", "guessedname": "Facade", "guessedtype": "function", "shortname": "Event.Facade", "properties": {"pageX": {"type": "int", "description": "The X location of the event on the page (including scroll)", "guessedname": "pageX", "guessedtype": "property"}, "relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "button": {"type": "int", "description": "The button that was pushed.", "guessedname": "button", "guessedtype": "property"}, "time": {"type": "Date", "description": "Timestamp for the event", "guessedname": "time", "guessedtype": "property"}, "currentTarget": {"type": "Node", "propery": "currentTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "currentTarget", "guessedtype": "property"}, "details": {"type": "Array", "description": "The event details.  Currently supported for Custom\nEvents only, where it contains the arguments that\nwere passed to fire().", "guessedname": "details", "guessedtype": "property"}, "which": {"type": "int", "description": "The button that was pushed.  Same as button.", "guessedname": "which", "guessedtype": "property"}, "pageY": {"type": "int", "description": "The Y location of the event on the page (including scroll)", "guessedname": "pageY", "guessedtype": "property"}, "charCode": {"type": "int", "description": "The charCode for key events.  Same as keyCode", "guessedname": "charCode", "guessedtype": "property"}, "keyCode": {"type": "int", "description": "The keyCode for key events.  Uses charCode if keyCode is not available", "guessedname": "c", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted element", "guessedname": "target", "guessedtype": "property"}}, "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required."}, "DDM": {"properties": {"_noShim": {"guessedname": "_noShim", "type": "{Boolean}", "description": "This flag turns off the use of the mouseover\/mouseout shim. It should not be used unless you know what you are doing.", "private": "", "guessedtype": "property"}, "_pg": {"guessedname": "_pg", "type": "{Node}", "description": "The shim placed over the screen to track the mousemove event.", "private": "", "guessedtype": "property"}, "useHash": {"type": "{Boolean}", "description": "Should we only check targets that are in the viewport on drags (for performance), default: true", "guessedname": "useHash", "guessedtype": "property"}, "INTERSECT": {"guessedname": "INTERSECT", "type": "Number", "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target", "private": "", "guessedtype": "property"}, "activeDrag": {"type": "{Drag}", "description": "A reference to the currently active draggable object.", "guessedname": "activeDrag", "guessedtype": "property"}, "POINT": {"guessedname": "POINT", "type": "Number", "description": "In point mode, a Drop is targeted by the cursor being over the Target", "private": "", "guessedtype": "property"}, "_activeShims": {"guessedname": "_activeShims", "type": "{Array}", "description": "Placeholder for all active shims on the page", "private": "", "guessedtype": "property"}, "otherDrops": {"type": "{Object}", "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)", "guessedname": "otherDrops", "guessedtype": "property"}, "validDrops": {"type": "{Array}", "description": "An array of the valid Drop Targets for this interaction."}, "STRICT": {"guessedname": "STRICT", "type": "Number", "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target", "private": "", "guessedtype": "property"}, "mode": {"guessedname": "mode", "type": "Number", "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict", "private": "", "guessedtype": "property"}, "CSS_PREFIX": {"type": "{String}", "description": "The PREFIX to attach to all DD CSS class names", "guessedname": "CSS_PREFIX", "guessedtype": "property"}, "_debugShim": {"guessedname": "_debugShim", "type": "{Boolean}", "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false.", "private": "", "guessedtype": "property"}, "targets": {"type": "{Array}", "description": "All of the Targets", "guessedname": "targets", "guessedtype": "property"}, "_drags": {"guessedname": "_drags", "type": "{Array}", "description": "Holder for all registered drag elements.", "private": "", "guessedtype": "property"}, "activeDrop": {"type": "{Object}", "description": "A reference to the active Drop Target", "guessedname": "activeDrop", "guessedtype": "property"}}, "name": "DDM", "constructors": [{"description": "Provides the base Drag Drop Manger required for making a Node draggable."}], "namespace": "", "module": "dd", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on>on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after>after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDMBase", "methods": {"cssSizestoObject": {"return": {"type": "Object", "description": "The gutter Object Literal."}, "description": "\/\/TODO Private, rename??...", "private": "", "params": [{"type": "String", "name": "gutter", "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"}], "guessedname": "cssSizestoObject", "guessedtype": "function"}, "_createPG": {"description": "Creates the shim and adds it's listeners to it.", "private": "", "guessedname": "_createPG", "guessedtype": "function"}, "_pg_deactivate": {"description": "Deactivates the shim", "private": "", "guessedname": "_pg_deactivate", "guessedtype": "function"}, "_init": {"description": "DDM's init method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_deactivateTargets": {"description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..", "private": "", "guessedname": "_deactivateTargets", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "getDrop": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String\/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drop Object"}], "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise", "guessedname": "getDrop", "guessedtype": "function"}, "_start": {"guessedname": "_start", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Internal method used by Drag to signal the start of a drag operation", "private": "", "guessedtype": "function"}, "_dropMove": {"description": "This method is called when the move method is called on the Drag Object.", "private": "", "guessedname": "_dropMove", "guessedtype": "function"}, "_unregDrag": {"guessedname": "_unregDrag", "params": [{"type": "Drag", "name": "d", "description": " The drag object."}], "description": "Remove this drag object from the DDM._drags array.", "private": "", "guessedtype": "function"}, "clearCache": {"description": "Clears the cache data used for this interaction.", "guessedname": "clearCache", "guessedtype": "function"}, "_hasActiveShim": {"guessedname": "_hasActiveShim", "return": {"type": "Boolean", "description": ""}, "description": "This method checks the _activeShims Object to see if there is a shim active.", "private": "", "guessedtype": "function"}, "_startDrag": {"guessedname": "_startDrag", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Factory method to be overwritten by other DDM's", "private": "", "guessedtype": "function"}, "_addActiveShim": {"guessedname": "_addActiveShim", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to add to the list."}], "description": "Adds a Drop Target to the list of active shims", "private": "", "guessedtype": "function"}, "_end": {"description": "Internal method used by Drag to signal the end of a drag operation", "private": "", "guessedname": "_end", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "Object or Array", "description": ""}, "params": [{"type": "Array", "name": "drops", "description": " An Array of drops to scan for the best match."}, {"type": "Boolean", "name": "all", "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."}], "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.", "guessedname": "getBestMatch", "guessedtype": "function"}, "_removeActiveShim": {"guessedname": "_removeActiveShim", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to remove from the list."}], "description": "Removes a Drop Target to the list of active shims", "private": "", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "drop", "description": " The drop to check against"}], "description": "Check to see if the Drag element is over the target, method varies on current mode", "guessedname": "isOverTarget", "guessedtype": "function"}, "_move": {"guessedname": "_move", "params": [{"type": "Event", "name": "ev", "description": " The Dom mousemove Event"}], "description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.", "private": "", "guessedtype": "function"}, "_activateTargets": {"description": "Clear the cache and activate the shims of all the targets", "private": "", "guessedname": "_activateTargets", "guessedtype": "function"}, "_addValid": {"return": {"type": "Self", "description": ""}, "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "guessedname": "_addValid", "guessedtype": "function"}, "syncActiveShims": {"return": {"type": "Array", "description": "drops The list of Drop Targets that was just synced."}, "params": [{"type": "Boolean", "name": "force", "description": " Resize\/sync all Targets."}], "description": "This method will sync the position of the shims on the Drop Targets that are currently active.", "guessedname": "syncActiveShims", "guessedtype": "function"}, "_removeValid": {"return": {"type": "Self", "description": ""}, "description": "Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "guessedname": "_removeValid", "guessedtype": "function"}, "_regTarget": {"guessedname": "_regTarget", "params": [{"type": "Object", "name": "t", "description": " The Target to add to the targets collection"}], "description": "Add the passed in Target to the targets collection", "private": "", "guessedtype": "function"}, "_endDrag": {"description": "Factory method to be overwritten by other DDM's", "private": "", "guessedname": "_endDrag", "guessedtype": "function"}, "setXY": {"params": [{"type": "Object", "name": "node", "description": " The node to set the position of"}, {"type": "Array", "name": "xy", "description": " The Array of left\/top position to be set."}], "description": "A simple method to set the top and left position from offsets instead of page coordinates", "guessedname": "setXY", "guessedtype": "function"}, "_unregTarget": {"guessedname": "_unregTarget", "params": [{"type": "Object", "name": "drop", "description": " The Target to remove from the targets collection"}], "description": "Remove the passed in Target from the targets collection", "private": "", "guessedtype": "function"}, "_pg_activate": {"description": "Activates the shim", "private": "", "guessedname": "_pg_activate", "guessedtype": "function"}, "_lookup": {"guessedname": "_lookup", "return": {"type": "Array", "description": "The valid Drop Targets that are in the viewport."}, "description": "Filters the list of Drops down to those in the viewport.", "private": "", "guessedtype": "function"}, "getDrag": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String\/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drag Object"}], "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise", "guessedname": "getDrag", "guessedtype": "function"}, "_regDrag": {"guessedname": "_regDrag", "params": [{"type": "Drag", "name": "d", "description": " The Drag object"}], "description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.", "private": "", "guessedtype": "function"}, "_pg_size": {"description": "Sizes the shim on: activatation, window:scroll, window:resize", "private": "", "guessedname": "_pg_size", "guessedtype": "function"}, "_handleTargetOver": {"guessedname": "_handleTargetOver", "params": [{"type": "Boolean", "name": "force", "description": " Force it to run the first time."}], "description": "This method execs _handleTargetOver on all valid Drop Targets", "private": "", "guessedtype": "function"}, "_setDragMode": {"return": {"type": "", "description": "Number The Mode to be set"}, "description": "Handler for dragMode attribute setter.", "private": "", "params": [{"type": "", "name": "String\/Number", "description": " The Number value or the String for the DragMode to default all future drag instances to."}], "guessedname": "_setDragMode", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "ddm-base.js", "guessedtype": "function", "shortname": "DDM", "configs": {"clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of all future Drag instances.", "guessedname": "dragMode", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "description": "Provides the base Drag Drop Manger required for making a Node draggable."}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quadratic)", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quartic)", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quadratic)", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quartic)", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quartic)", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quadratic)", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "anim-easing.js", "guessedtype": "property", "shortname": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}, "Event.Custom": {"name": "Event.Custom", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "context", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe debug system"}], "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "event", "events": {"subscribeEvent": {"type": "Y.Event.Custom", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution context of the listener.\nif an object, that object becomes the\nthe execution context."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"after": {"return": {"type": "Event.Handle", "description": "unsubscribe handle"}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event fires"}, {"type": "", "name": "args*", "description": " 1..n params to provide to the listener"}], "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the \ndefault behavior, it also prevents after listeners from firing.", "guessedname": "after", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "msg", "description": "  message to log"}, {"type": "string", "name": "cat", "description": "  log category"}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}, "_delete": {"params": [{"type": "", "name": "subscriber", "description": " object"}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "_notify": {"guessedname": "_notify", "params": [{"type": "Event.Subscriber", "name": "s", "description": "  the subscriber"}, {"type": "Array", "name": "args", "description": "  the arguments array to apply to the listener"}], "description": "Notify a single subscriber", "private": "", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "", "name": "o", "description": " hash of properties to apply"}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event \nwill be overwritten."}], "description": "Apply configuration properties.  Only applies the CONFIG whitelist", "guessedname": "applyConfig", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the execution of this event's defaultFn", "guessedname": "preventDefault", "guessedtype": "function"}, "subscribe": {"return": {"type": "Event.Handle", "description": "unsubscribe handle"}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event fires"}, {"type": "", "name": "args*", "description": " 1..n params to provide to the listener"}], "description": "Listen for this event", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes subscribers.", "guessedname": "unsubscribe", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Custom", "properties": {"silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented.", "guessedname": "defaultFn", "guessedtype": "property"}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately.", "guessedname": "fireOnce", "guessedtype": "property"}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event", "guessedname": "prevented", "guessedtype": "property"}, "preventedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\npreventDefault", "guessedname": "preventedFn", "guessedtype": "property"}, "subscribers": {"type": "Event.Subscriber{}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "broadcast": {"type": "int", "description": "If 0, this event does not broadcast.  If 1, the YUI instance is notified\nevery time this event fires.  If 2, the YUI instance and the YUI global\n(if event is enabled on the global) are notified every time this event\nfires.", "guessedname": "broadcast", "guessedtype": "property"}, "host": {"type": "Event.Target", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling", "guessedname": "host", "guessedtype": "property"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target.", "guessedname": "stopped", "guessedtype": "property"}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "preventable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be cancelled by a subscriber by executing preventDefault() \non the event facade", "guessedname": "preventable", "guessedtype": "property"}, "stoppedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation", "guessedname": "stoppedFn", "guessedtype": "property"}, "fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true", "guessedname": "fired", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()", "guessedname": "bubbles", "guessedtype": "property"}, "afters": {"type": "Event.Subscriber{}", "description": "'After' subscribers", "guessedname": "afters", "guessedtype": "property"}}, "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "Queue": {"name": "Queue", "constructors": [{"params": [{"type": "Function|Object", "name": "callback*", "description": "  Any number of callbacks to initialize the queue"}], "description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each\ncallback is executed via setTimout unless configured with a negative\ntimeout, in which case it is run in blocking mode in the same execution\nthread as the previous callback.  Callbacks can be function references or\nobject literals with the following keys:\n<ul>\n<li><code>fn<\/code> - {Function} REQUIRED the callback function.<\/li>\n<li><code>timeout<\/code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.<\/li>\n<li><code>until<\/code> - {Function} boolean function executed before each iteration.  Return true to indicate callback completion.<\/li>\n<li><code>iterations<\/code> - {Number} number of times to execute the callback before proceeding to the next callback in the queue. Incompatible with <code>until<\/code>.<\/li>\n<\/ul>"}], "namespace": "", "module": "queue", "events": {"beforeCallback": {"params": [{"type": "Object", "name": "o", "description": "  Object literal with the following keys:\n<dl>\n<dt>fn<\/dt><dd>The function about to be executed<\/dd>\n<dt>callback<\/dt><dd>The callback as provided to <code>add(..)<\/code><\/dd>\n<\/dl>"}], "description": "Fired before a callback is executed", "guessedname": "fn", "guessedtype": "property"}, "pause": {"description": "Fired after Queue is paused"}, "end": {"description": "Event fired after the last queued callback is executed.  Not\nfired if the Queue is stopped via q.stop()."}, "stop": {"description": "Fired after Queue is stopped"}, "afterCallback": {"params": [{"type": "Object", "name": "o", "description": "  Object literal with the following keys:\n<dl>\n<dt>fn<\/dt><dd>The function just executed<\/dd>\n<dt>callback<\/dt><dd>The callback as provided to <code>add(..)<\/code><\/dd>\n<\/dl>"}], "description": "Fired before a callback is executed", "guessedname": "fn", "guessedtype": "property"}, "shiftCallback": {"params": [{"type": "Function|Object", "name": "callback", "description": "  The callback passed to <code>add(..)<\/code>"}], "description": "Fired after a callback is shifted from the Queue"}, "addCallback": {"params": [{"type": "Array", "name": "callbacks", "description": "  Array of callbacks passed to <code>add(..)<\/code>"}], "description": "Fired from within <code>add(..)<\/code> after callbacks are queued"}}, "guessedname": "Queue", "methods": {"pause": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Pause the execution of the Queue after the execution of the current\ncallback completes.  If called from code outside of a queued callback,\nclears the timeout for the pending callback. Paused Queue can be\nrestarted with q.run()", "guessedname": "pause", "guessedtype": "function"}, "run": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Execute the queue callbacks (also resumes paused Queue).", "guessedname": "run", "guessedtype": "function"}, "stop": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Stop and clear the Queue's queue after the current execution of the\ncurrent callback completes.", "guessedname": "stop", "guessedtype": "function"}, "add": {"return": {"type": "Queue", "description": "the Queue instance"}, "params": [{"type": "Function|Object", "name": "callback*", "description": "  Any number of callbacks"}], "description": "Add any number of callbacks to the end of the queue", "guessedname": "add", "guessedtype": "function"}, "_shift": {"private": "", "description": "Shifts the first callback off the Queue", "guessedname": "_shift", "guessedtype": "function"}, "_exec": {"protected": "", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "Object|Function", "name": "c", "description": "  the callback as defined during add(c)"}], "description": "Executes the callback function", "guessedname": "_exec", "guessedtype": "function"}}, "file": "Queue.js", "guessedtype": "function", "shortname": "Queue", "properties": {"q": {"protected": "", "type": "{Array}", "description": "The callback queue", "guessedname": "q", "guessedtype": "property"}, "id": {"protected": "", "type": "{number}", "description": "Timeout id used to pause or stop execution and indicate the execution\nstate of the Queue.  0 indicates paused or stopped, negatives indicate\nblocking execution, and positives indicate non-blocking execution.", "guessedname": "id", "guessedtype": "property"}}, "description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each\ncallback is executed via setTimout unless configured with a negative\ntimeout, in which case it is run in blocking mode in the same execution\nthread as the previous callback.  Callbacks can be function references or\nobject literals with the following keys:\n<ul>\n<li><code>fn<\/code> - {Function} REQUIRED the callback function.<\/li>\n<li><code>timeout<\/code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.<\/li>\n<li><code>until<\/code> - {Function} boolean function executed before each iteration.  Return true to indicate callback completion.<\/li>\n<li><code>iterations<\/code> - {Number} number of times to execute the callback before proceeding to the next callback in the queue. Incompatible with <code>until<\/code>.<\/li>\n<\/ul>"}, "Do.Error": {"description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls", "namespace": "", "module": "event", "guessedname": "Error", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Error", "name": "Do.Error"}, "YUI~dump": {"name": "YUI~dump", "namespace": "", "module": "dump", "methods": {"dump": {"return": {"type": "string", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "params": [{"type": "object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function", "todo": "dumping a window is causing an unhandled exception in\nFireFox.\nThis method is in the 'dump' module, which is not bundled with\nthe core YUI object"}}, "file": "dump.js", "shortname": "YUI~dump", "description": "The following methods are added to the YUI instance"}, "Attribute": {"name": "Attribute", "namespace": "", "module": "attribute", "methods": {"removeAtt": {"params": [{"type": "String", "name": "name", "description": " The attribute key"}], "description": "Removes an attribute.", "guessedname": "removeAtt", "guessedtype": "function"}, "on": {"return": {"type": "Event.Handle", "description": "The handle object for unsubscribing the subscriber from the event."}, "params": [{"type": "String", "name": "type", "description": " The event type. For attribute change events, the event type is \"[Attribute Name]Change\", e.g.\nfor the attribute \"enabled\", the event type will be \"enabledChange\"."}, {"type": "Function", "name": "fn", "description": " The subscribed function to invoke"}, {"type": "Object", "name": "context", "description": " Optional execution context"}, {"type": "Any*", "name": "args*", "description": " 0..n additional arguments to append to supply to the subscribed function when the event fires."}], "description": "<p>\nAlias for the Event.Target <a href=\"Event.Target.html#method_subscribe\">subscribe<\/a> method.\n<\/p>\n<p>Subscribers using this method to listen for attribute change events will be notified just\n<strong>before<\/strong> the state of the attribute has been modified, and before the default handler has been\ninvoked.<\/p>\n<p>The <a href=\"Event.Target.html#method_after\">after<\/a> method, inherited from Event Target, can be used by subscribers\nwho wish to be notified <strong>after<\/strong> the attribute's value has changed.<\/p>", "guessedname": "on", "guessedtype": "function"}, "_getSubAttVal": {"return": {"type": "Any", "description": "The value stored in the path or undefined if not found."}, "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.", "private": "", "params": [{"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."}, {"type": "Object", "name": "val", "description": "  The object from which to extract the property value"}], "guessedname": "_getSubAttVal", "guessedtype": "function"}, "set": {"return": {"type": "Object", "description": "Reference to the host object"}, "description": "Sets the value of an attribute.", "chainable": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. Note, if the \nvalue of the attribute is an Object, dot notation can be used\nto set the value of a property within the object \n(e.g. <code>set(\"x.y.z\", 5)<\/code>), if the attribute has not\nbeen declared as an immutable attribute (see <a href=\"#property_CLONE\">Attribute.CLONE<\/a>)."}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Object", "name": "opts", "description": " Optional event data. This object will be mixed into\nthe event facade passed as the first argument to subscribers \nof attribute change events"}], "guessedname": "set", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The current value of the attribute"}, "params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned. If\nthe value of the attribute is an Object, dot notation can be used to\nobtain the value of a property of the object (e.g. <code>get(\"x.y.z\")<\/code>)"}], "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'get' handler, this method will delegate\nto the 'get' handler to obtain the value of the attribute.\nThe 'get' handler will be passed the current value of the attribute \nas the only argument.", "guessedname": "get", "guessedtype": "function"}, "_cloneAttVal": {"return": {"type": "Any", "description": "The cloned copy of the object, based on the provided type."}, "description": "<p>\nClone utility method, which will \nclone the provided value using YUI's \nmerge, or clone utilities based\non the clone type provided. See <a href=\"#property_CLONE\">Attribute.CLONE<\/a>\n<\/p>", "private": "", "params": [{"type": "Any", "name": "val", "description": " Value to clone"}, {"type": "int", "name": "type", "description": " Clone type to use, See the CLONE property"}], "guessedname": "_cloneAttVal", "guessedtype": "function"}, "setAtts": {"params": [{"type": "Object", "name": "atts", "description": "  A hash of attributes: name\/value pairs"}], "description": "Sets multiple attribute values.", "guessedname": "setAtts", "guessedtype": "function"}, "_defAttSet": {"guessedname": "_defAttSet", "params": [{"type": "Event.Facade", "name": "e", "description": " The event object for the custom event"}], "description": "Default handler implementation for set events", "private": "", "guessedtype": "function"}, "_setSubAttVal": {"return": {"type": "Object", "description": "The modified object, with the new sub value set, or \nundefined, if the path was invalid."}, "description": "Sets the sub value at the provided path on the value object.\nReturns the modified value object, or undefined if the path is invalid.", "private": "", "params": [{"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nat which to set the sub value."}, {"type": "Object", "name": "val", "description": "  The object on which to set the sub value."}, {"type": "Any", "name": "subval", "description": "  The sub value to set."}], "guessedname": "_setSubAttVal", "guessedtype": "function"}, "_fireAttChange": {"guessedname": "_fireAttChange", "params": [{"type": "String", "name": "type", "description": " The event name"}, {"type": "Any", "name": "currVal", "description": " The current value of the attribute"}, {"type": "Any", "name": "newVal", "description": " The new value of the attribute"}, {"type": "String", "name": "attrName", "description": " The name of the attribute"}, {"type": "String", "name": "strFullPath", "description": " The full path of the property being changed, \nif this is a sub-attribute value being change"}, {"type": "Function", "name": "defaultFn", "description": " The default handler for the change event"}, {"type": "Object", "name": "opts", "description": " Any additional event data to mix into the attribute change event's event facade."}], "description": "Utility method to help setup the event payload and \nfire the attribute change event.", "private": "", "guessedtype": "function"}, "getAtts": {"return": {"type": "Object", "description": "A hash of attributes: name\/value pairs"}, "description": "Gets multiple attribute values.", "guessedname": "getAtts", "guessedtype": "function"}, "addAtt": {"params": [{"type": "String", "name": "name", "description": " The attribute key"}, {"type": "Object", "name": "config", "description": " (optional) An object literal specifying the configuration for the attribute.\n<strong>NOTE:<\/strong> The config object is modified when adding an attribute, \nso if you need to protect the original values, you will need to merge or clone the object."}], "description": "<p>\nAdds an attribute, with the provided configuration to the host object. Intended\nto be used by the host object to setup it's set of available attributes.\n<\/p>\n<p>\nThe config argument object literal supports the following optional properties:\n<\/p>\n<dl>\n<dt>value &#60;Any&#62;<\/dt>\n<dd>The initial value to set on the attribute<\/dd>\n<dt>readOnly &#60;Boolean&#62;<\/dt>\n<dd>Whether or not the attribute is read only. Attributes having readOnly set to true\ncannot be set by invoking the set method.<\/dd>\n<dt>writeOnce &#60;Boolean&#62;<\/dt>\n<dd>Whether or not the attribute is \"write once\". Attributes having writeOnce set to true, \ncan only have their values set once, be it through the default configuration, \nconstructor configuration arguments, or by invoking set.<\/dd>\n<dt>set &#60;Function&#62;<\/dt>\n<dd>The setter function to be invoked (within the context of the host object) before \nthe attribute is stored by a call to the set method. The value returned by the \nset function will be the finally stored value.<\/dd>\n<dt>get &#60;Function&#62;<\/dt>\n<dd>The getter function to be invoked (within the context of the host object) before\nthe stored values is returned to a user invoking the get method for the attribute.\nThe value returned by the get function is the final value which will be returned to the \nuser when they invoke get.<\/dd>\n<dt>validator &#60;Function&#62;<\/dt>\n<dd>The validator function which is invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored<\/dd>\n<dt>clone &#60;int&#62;<\/dt>\n<dd>If and how the value returned by a call to the get method, should be de-referenced from\nthe stored value. By default values are not cloned, and hence a call to get will return\na reference to the stored value. See Attribute.CLONE for more details about the clone \noptions available<\/dd>\n<\/dl>", "guessedname": "addAtt", "guessedtype": "function"}, "_splitAttrValues": {"return": {"type": "Object", "description": "Object literal with 2 properties - \"simple\" and \"complex\",\ncontaining simple and complex attribute values respectively keyed \nby attribute the top level attribute name."}, "description": "Utility to split out regular attribute values\nfrom complex attribute values, so that complex\nattributes can be keyed by top level attribute name.", "private": "", "params": [{"type": "Object", "name": "valueHash", "description": " Name\/value hash of initial values"}], "guessedname": "_splitAttVals", "guessedtype": "function"}, "_initAtts": {"protected": "", "params": [{"type": "Object", "name": "cfg", "description": " Attribute configuration object literal"}, {"type": "Object", "name": "initValues", "description": " Name\/value hash of initial values to apply"}], "description": "Configures attributes, and sets initial values", "guessedname": "_initAtts", "guessedtype": "function"}, "_initAttVal": {"return": {"type": "Any", "description": "Initial value of the attribute."}, "description": "Returns the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the initValues \nhash provided.", "private": "", "params": [{"type": "String", "name": "att", "description": " Attribute name"}, {"type": "Object", "name": "cfg", "description": " Default attribute configuration\nobject literal"}, {"type": "Object", "name": "initVales", "description": " Initial attribute values, provided \nfor the instance"}], "guessedname": "_initAttVal", "guessedtype": "function"}}, "uses": ["Event.Target"], "file": "Attribute.js", "shortname": "Attribute", "properties": {"CLONE": {"description": "<p>\nConstants for clone formats supported by Attribute.\n<\/p>\n<p>\nBy default attribute values returned by the get method\nare not cloned. However setting the attribute's \"clone\"\nproperty to:\n<\/p>\n<dl>\n<dt>Attribute.CLONE.DEEP<\/dt>\n<dd>Will result in a deep cloned value being returned\n(using YUI's clone method). This can be expensive for complex\nobjects.\n<\/dd>\n<dt>Attribute.CLONE.SHALLOW<\/dt>\n<dd>Will result in a shallow cloned value being returned\n(using YUI's merge method).\n<\/dd>\n<dt>Attribute.CLONE.IMMUTABLE<\/dt>\n<dd>Will result in a deep cloned value being returned\nwhen using the get method. Additionally users will\nnot be able to set sub values of the attribute \nusing the complex attribute notation (obj.set(\"x.y.z, 5)).\nHowever the value of the attribute can be changed, making\nit different from a READONLY attribute.\n<\/dd>\n<dt>Attribute.CLONE.NONE<\/dt>\n<dd>\nThe value will not be cloned, resulting in a reference\nto the stored value being passed back, if the value is an object.\nThis is the default behavior.\n<\/dd>\n<\/dl>", "static": "", "guessedname": "CLONE", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "<p>\nAttribute provides managed attribute support. \n<\/p>\n<p>\nThe class is designed to be augmented onto a host class, \nand allows the host to support get\/set methods for attributes,\ninitial configuration support and attribute change events.\n<\/p>\n<p>Attributes added to the host can:<\/p>\n<ul>\n<li>Be defined as read-only.<\/li>\n<li>Be defined as write-once.<\/li>\n<li>Be defined with a set function, used to manipulate\nvalues passed to Attribute's set method, before they are stored.<\/li>\n<li>Be defined with a validator function, to validate values before they are stored.<\/li>\n<li>Be defined with a get function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's get method.<\/li>\n<li>Specify if and how they should be cloned on 'get' (see <a href=\"#property_CLONE\">Attribute.CLONE<\/a> for supported clone modes).<\/li>\n<\/ul>\n<p>See the <a href=\"#method_addAtt\">addAtt<\/a> method, for details about how to add attributes with\na specific configuration<\/p>"}, "YUI~array": {"name": "YUI~array", "namespace": "", "module": "yui", "methods": {"Array.test": {"return": {"type": "int", "description": "a number indicating the results:\n0: Not an array or an array-like collection\n1: A real array. \n2: array-like collection."}, "description": "Evaluates the input to determine if it is an array, array-like, or \nsomething else.  This is used to handle the arguments collection \navailable within functions, and HTMLElement collections", "static": "", "guessedname": "test", "guessedtype": "function", "todo": "current implementation (intenionally) will not implicitly \nhandle html elements that are array-like (forms, selects, etc)."}, "Array": {"return": {"type": "Array", "description": "the resulting array"}, "description": "Y.Array(o) returns an array:\n- Arrays are return unmodified unless the start position is specified.\n- \"Array-like\" collections (@see Array.test) are converted to arrays\n- For everything else, a new array is created with the input as the sole item\n- The start position is used if the input is or is like an array to return\na subset of the collection.", "static": "", "guessedname": "Array", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the item to arrayify"}, {"type": "int", "name": "i", "description": "  if an array or array-like, this is the start index"}, {"type": "boolean", "name": "al", "description": "  if true, it forces the array-like fork.  This\ncan be used to avoid multiple array.test calls."}], "todo": "this will not automatically convert elements that are also collections\nsuch as forms and selects.  Passing true as the third param will\nforce a conversion."}, "Array.indexOf": {"return": {"type": "int", "description": "the index of the item that contains the value or -1"}, "description": "Returns the index of the first item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.", "static": "", "guessedname": "indexOf", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to search"}, {"type": "", "name": "val", "description": " the value to search for"}], "todo": "use native method if avail"}, "Array.hash": {"return": {"type": "object", "description": "the hash"}, "description": "Returns an object using the first array as keys, and\nthe second as values.  If the second array is not\nprovided the value is set to true for each.", "static": "", "guessedname": "hash", "guessedtype": "function", "params": [{"type": "Array", "name": "k", "description": "  keyset"}, {"type": "Array", "name": "v", "description": "  optional valueset"}]}, "Array.each": {"static": "", "return": {"type": "YUI", "description": "the YUI instance"}, "description": "Executes the supplied function on each item in the array.", "guessedname": "each", "guessedtype": "property"}}, "file": "yui-array.js", "shortname": "YUI~array", "description": "Adds the following array utilities to the YUI instance"}, "Event.Subscriber": {"name": "Event.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "Array", "name": "args", "description": "        subscribe() additional arguments"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "event", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "notify": {"params": [{"type": "", "name": "defaultContext", "description": " The execution context if not overridden\nby the subscriber"}, {"type": "Array", "name": "args", "description": "  Arguments array for the subscriber"}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Subscriber", "properties": {"wrappedFn": {"type": "Function", "description": "}\nfn bound to obj with additional arguments applied via Y.bind", "guessedname": "wrappedFn", "guessedtype": "property"}, "args": {"type": "Array", "description": "Optional additional arguments supplied to subscribe().  If present,\nthese will be appended to the arguments supplied to fire()"}, "obj": {"type": "Object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.bind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "Do.AlterReturn": {"description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller", "namespace": "", "module": "event", "guessedname": "AlterReturn", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.AlterReturn", "name": "Do.AlterReturn"}, "Loader": {"name": "Loader", "constructors": [{"params": [{"type": "", "name": "o", "description": " an optional set of configuration options.  Valid options:\n<ul>\n<li>base:\nThe base dir<\/li>\n<li>secureBase:\nThe secure base dir (not implemented)<\/li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http:\/\/yui.yahooapis.com\/combo?<\/li>\n<li>root:\nThe root path to prepend to module names for the combo service. Ex: 2.5.2\/build\/<\/li>\n<li>filter:\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).<\/dd>\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>\n<\/li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections required to load your dependencies<\/li>\n<li>ignore:\nA list of modules that should never be dynamically loaded<\/li>\n<li>force:\nA list of modules that should always be loaded when required, even if already present on the page<\/li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for new nodes<\/li>\n<li>charset:\ncharset for dynamic nodes<\/li>\n<li>timeout:\nnumber of milliseconds before a timeout occurs when dynamically loading nodes.  in not set, there is no timeout<\/li>\n<li>context:\nexecution context for all callbacks<\/li>\n<li>onSuccess:\ncallback for the 'success' event<\/li>\n<li>onFailure:\ncallback for the 'failure' event<\/li>\n<li>onTimeout:\ncallback for the 'timeout' event<\/li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded<\/li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported module metadata<\/li>\n<\/ul>"}], "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files."}], "namespace": "", "module": "yui", "methods": {"_setup": {"private": "", "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()", "guessedname": "_setup", "guessedtype": "function"}, "_explode": {"private": "", "description": "Inspects the required modules list looking for additional \ndependencies.  Expands the required list to include all \nrequired modules.  Called by calculate()", "guessedname": "_explode", "guessedtype": "function"}, "calculate": {"params": [{"type": "", "name": "o", "description": " optional options object"}], "description": "Calculates the dependency tree, the result is stored in the sorted \nproperty", "guessedname": "calculate", "guessedtype": "function"}, "onFailure": {"type": "function", "description": "Callback that will be executed if there is a failure", "guessedname": "onFailure", "guessedtype": "property"}, "insert": {"params": [{"type": "", "name": "o", "description": " optional options object"}, {"type": "string", "name": "type", "description": "  the type of dependency to insert"}], "description": "inserts the requested modules and their dependencies.  \n<code>type<\/code> can be \"js\" or \"css\".  Both script and \ncss are inserted if type is not provided.", "guessedname": "insert", "guessedtype": "function"}, "onProgress": {"type": "function", "description": "Callback executed each time a script or css file is loaded", "guessedname": "onProgress", "guessedtype": "property"}, "require": {"params": [{"type": "string[] | string*", "name": "what", "description": "  the modules to load"}], "description": "Add a requirement for one or more module", "guessedname": "require", "guessedtype": "function"}, "getRequires": {"params": [{"type": "", "name": "mod", "description": " The module definition from moduleInfo"}], "description": "Returns an object containing properties for all modules required\nin order to load the requested module", "guessedname": "getRequires", "guessedtype": "function"}, "addModule": {"return": {"type": "boolean", "description": "true if the module was added, false if \nthe object passed in did not provide all required attributes"}, "params": [{"type": "", "name": "o", "description": " An object containing the module data"}, {"type": "", "name": "name", "description": " the module name (optional), required if not in the module data"}], "description": "Add a new module to the component metadata.         \n<dl>\n<dt>name:<\/dt>       <dd>required, the component name<\/dd>\n<dt>type:<\/dt>       <dd>required, the component type (js or css)<\/dd>\n<dt>path:<\/dt>       <dd>required, the path to the script from \"base\"<\/dd>\n<dt>requires:<\/dt>   <dd>array of modules required by this component<\/dd>\n<dt>optional:<\/dt>   <dd>array of optional modules for this component<\/dd>\n<dt>supersedes:<\/dt> <dd>array of the modules this component replaces<\/dd>\n<dt>after:<\/dt>      <dd>array of modules the components which, if present, should be sorted above this one<\/dd>\n<dt>rollup:<\/dt>     <dd>the number of superseded modules required for automatic rollup<\/dd>\n<dt>fullpath:<\/dt>   <dd>If fullpath is specified, this is used instead of the configured base + path<\/dd>\n<dt>skinnable:<\/dt>  <dd>flag to determine if skin assets should automatically be pulled in<\/dd>\n<dt>submodules:<\/dt> <dd>a has of submodules<\/dd>\n<\/dl>", "guessedname": "addModule", "guessedtype": "function"}, "onSuccess": {"type": "function", "description": "Callback that will be executed when the loader is finished\nwith an insert", "guessedname": "onSuccess", "guessedtype": "property"}, "loadNext": {"params": [{"type": "string", "name": "mname", "description": "  optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)"}], "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nY.register to determine when scripts are fully loaded", "guessedname": "loadNext", "guessedtype": "function"}, "_sort": {"private": "", "description": "Sorts the dependency tree.  The last step of calculate()", "guessedname": "_sort", "guessedtype": "function"}, "_pushEvents": {"guessedname": "_pushEvents", "params": [{"type": "Function", "name": "optional", "description": " function reference"}], "description": "In IE, the onAvailable\/onDOMReady events need help when Event is\nloaded dynamically", "private": "", "guessedtype": "function"}, "onTimeout": {"type": "function", "description": "Callback that will be executed if a timeout occurs", "guessedname": "onTimeout", "guessedtype": "property"}, "_url": {"return": {"type": "string", "description": "the full url"}, "description": "Generates the full url for a module\nmethod _url", "private": "", "params": [{"type": "string", "name": "path", "description": "  the path fragment"}], "guessedname": "_url", "guessedtype": "function"}, "getProvides": {"return": {"type": "", "description": "what this module provides"}, "params": [{"type": "string", "name": "name", "description": " The name of the module"}, {"type": "string", "name": "notMe", "description": "  don't add this module name, only include superseded modules"}], "description": "Returns an object literal of the modules the supplied module satisfies", "guessedname": "getProvides", "guessedtype": "function"}, "_reduce": {"private": "", "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies", "guessedname": "_reduce", "guessedtype": "function"}, "_rollup": {"private": "", "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate()", "guessedname": "_rollup", "guessedtype": "function"}}, "file": "loader.js", "shortname": "Loader", "properties": {"force": {"type": "string[]", "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page.", "guessedname": "force", "guessedtype": "property"}, "rollups": {"description": "List of rollup files found in the library metadata", "guessedname": "rollups", "guessedtype": "property"}, "allowRollup": {"default": "true", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollup", "guessedtype": "property"}, "loaded": {"type": "{string: boolean}", "propery": "loaded", "description": "Set when beginning to compute the dependency tree. \nComposed of what YUI reports to be loaded combined\nwith what has been loaded by the tool", "guessedname": "loaded", "guessedtype": "property"}, "_internalCallback": {"private": "", "description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js", "guessedname": "_internalCallback", "guessedtype": "property"}, "inserted": {"type": "{string: boolean}", "description": "List of modules inserted by the utility", "guessedname": "inserted", "guessedtype": "property"}, "charset": {"default": "utf-8", "type": "string", "description": "The charset attribute for inserted nodes", "guessedname": "charset", "guessedtype": "property"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for \nthe requested modules", "guessedname": "loadOptional", "guessedtype": "property"}, "ignoreRegistered": {"default": "false", "description": "Ignore modules registered on the YUI global", "guessedname": "ignoreRegistered", "guessedtype": "property"}, "attaching": {"description": "A list of modules to attach to the YUI instance when complete.\nIf not supplied, the sorted list of dependencies are applied.", "guessedname": "attaching", "guessedtype": "property"}, "combine": {"default": "true if a base dir isn't in the config", "type": "boolean", "description": "If configured, YUI JS resources will use the combo\nhandler", "guessedname": "combine", "guessedtype": "property"}, "moduleInfo": {"description": "The library metadata"}, "filter": {"type": "string|{searchExp: string, replaceStr: string}", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).<\/dd>\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>", "guessedname": "filter", "guessedtype": "property"}, "comboBase": {"default": "http:\/\/yui.yahooapis.com\/combo?", "type": "string", "description": "Base path for the combo service", "guessedname": "comboBase", "guessedtype": "property"}, "context": {"default": "{YUI} the YUI instance", "description": "The execution context for all callbacks", "guessedname": "context", "guessedtype": "property"}, "insertBefore": {"type": "string|HTMLElement", "description": "Node reference or id where new nodes should be inserted before", "guessedname": "insertBefore", "guessedtype": "property"}, "base": {"default": "http:\/\/yui.yahooapis.com\/[YUI VERSION]\/build\/", "type": "string", "description": "The base directory.", "guessedname": "base", "guessedtype": "property"}, "sorted": {"type": "string[]", "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called", "guessedname": "sorted", "guessedtype": "property"}, "data": {"description": "Data that is passed to all callbacks", "guessedname": "data", "guessedtype": "property"}, "_useYahooListener": {"private": "", "description": "Use the YUI environment listener to detect script load.  This\nis only switched on for Safari 2.x and below.", "guessedname": "_useYahooListener", "guessedtype": "property"}, "required": {"type": "{string: boolean}", "description": "The list of requested modules", "guessedname": "required", "guessedtype": "property"}, "ignore": {"type": "string[]", "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree", "guessedname": "ignore", "guessedtype": "property"}, "dirty": {"default": "true", "type": "boolean", "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again.", "guessedname": "dirty", "guessedtype": "property"}, "timeout": {"type": "int", "description": "Timeout value in milliseconds.  If set, this value will be used by\nthe get utility.  the timeout event will fire if\na timeout occurs.", "guessedname": "timeout", "guessedtype": "property"}, "root": {"default": "[YUI VERSION]\/build\/", "type": "string", "description": "Root path to prepend to module path for the combo\nservice", "guessedname": "root", "guessedtype": "property"}}, "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files."}, "YUI~oop": {"name": "YUI~oop", "namespace": "", "module": "oop", "methods": {"augment": {"return": {"type": "object", "description": "the augmented object"}, "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "Array | Any", "name": "args", "description": "  arg or arguments to apply to the supplier\nconstructor when initializing."}], "guessedname": "augment", "guessedtype": "function", "todo": "constructor optional?"}, "extend": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "Function", "name": "r", "description": "   the object to modify"}, {"type": "Function", "name": "s", "description": " the object to inherit"}, {"type": "Object", "name": "px", "description": " prototype properties to add\/override"}, {"type": "Object", "name": "sx", "description": " static properties to add\/override"}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "bind": {"return": {"type": "function", "description": "the wrapped function"}, "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.\nIn some cases it is preferable to have the additional arguments\napplied to the beginning of the function signature.  For instance,\nFireFox setTimeout\/setInterval supplies a parameter that other\nbrowsers do not.  \nNote: YUI provides a later() function which wraps setTimeout\/setInterval,\nproviding context adjustment and parameter addition.  This can be \nused instead of setTimeout\/setInterval, avoiding the arguments\ncollection issue when using bind() in FireFox.", "params": [{"type": "Function", "name": "f", "description": "  the function to bind"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "", "name": "args*", "description": " 0..n arguments to append to the end of arguments collection\nsupplied to the function"}], "guessedname": "bind", "guessedtype": "function", "todo": "review param order for PR2"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object"}, "description": "Deep obj\/array copy.  Functions will are cloned with Y.bind.\nArray-like objects are treated as arrays.\nprimitives are returned untouched.  Optionally a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "params": [{"type": "", "name": "o", "description": " what to clone"}, {"type": "boolean", "name": "safe", "description": "  if true, objects will not have prototype\nitems from the source.  If false, it does.  In this case, the\noriginal is initally protected, but the clone is not completely immune\nfrom changes to the source object prototype.  Also, cloned prototype\nitems that are deleted from the clone will result in the value\nof the source prototype to be exposed.  If operating on a non-safe\nclone, items should be nulled out rather than deleted."}, {"type": "", "name": "f", "description": " optional function to apply to each item in a collection\nit will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "", "name": "c", "description": " optional execution context for f"}, {"type": "", "name": "owner", "description": " Owner object passed when clone is iterating an\nobject.  Used to set up context for cloned functions."}], "guessedname": "clone", "guessedtype": "function", "todo": "review"}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters"}, {"type": "", "name": "proto", "description": " if true, prototype properties are\niterated on objects"}], "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nY.NodeLists", "guessedname": "each", "guessedtype": "function"}, "aggregate": {"return": {"type": "object", "description": "the extended object"}, "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}], "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "guessedname": "aggregate", "guessedtype": "function"}}, "file": "oop.js", "shortname": "YUI~oop", "description": "The following methods are added to the YUI instance"}, "DropPlugin": {"name": "DropPlugin", "constructors": [{"description": "This is a simple Drop plugin that can be attached to a Node via the plug method."}], "namespace": "", "module": "dd-plugin", "guessedname": "Plugin", "extends": "Drop", "superclass": "Drop", "file": "dd-drop-plugin.js", "guessedtype": "property", "shortname": "DropPlugin", "properties": {"NS": {"type": "{String}", "description": "The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-drop-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "This is a simple Drop plugin that can be attached to a Node via the plug method."}, "Event": {"name": "Event", "namespace": "", "module": "event", "guessedname": "Event", "methods": {"onDOMReady": {"description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a Event.Custom, so the signature is:<\/p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;<\/p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:<\/p>\n<p>\"DOMReady\", [], obj<\/p>", "deprecated": "Use Y.on('event:ready');", "static": "", "guessedname": "onDOMReady", "guessedtype": "function", "params": [{"type": "function", "name": "fn", "description": " what to execute when the element is found."}], "optional": "context execution context"}, "nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "nativeRemove", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "deprecated": "Use Y.on instead.  This will be removed in PR2", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "args", "description": " 1..n ar"}]}, "getListeners": {"return": {"type": "Y.Custom.Event", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "boundEl", "description": " the element the listener is attached to"}]}, "resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode", "guessedname": "resolve", "guessedtype": "function"}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "onContentReady": {"deprecated": "This will be replaced with a special Y.on custom event", "static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "guessedname": "nativeAdd", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "onAvailable": {"deprecated": "This will be replaced with a special Y.on custom event", "static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "on": {"see": "addListener", "static": "", "description": "Y.Event.on is an alias for addListener", "guessedname": "attach", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false *  otherwise."}, "description": "Removes an event listener.  Supports the signature the event was bound\nwith, but the preferred way to remove listeners is using the handle\nthat is returned when using Y.on", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are *  removed."}]}}, "static": "", "file": "event-dom.js", "guessedtype": "function", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 2000@amp;20 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is \n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is \nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}}, "version": "3.0.0pr1", "modules": {"node": {"description": "Extended Node interface for managing classNames.", "submodules": ["node-screen", "node-style", "node-base"], "classlist": ["Node", "NodeList"], "filelist": ["node-screen.js", "node-style.js", "node.js"], "subdata": {"node-base": {"name": "NodeList", "description": "A wrapper for manipulating multiple DOM elements"}, "node-style": {"name": "Node", "description": "Extended Node interface for managing node styles."}, "node-screen": {"name": "Node", "description": "Extended Node interface for managing regions and screen positioning.\nAdds support for positioning elements and normalizes window size and scroll detection."}}, "name": "node"}, "queue": {"description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each\ncallback is executed via setTimout unless configured with a negative\ntimeout, in which case it is run in blocking mode in the same execution\nthread as the previous callback.  Callbacks can be function references or\nobject literals with the following keys:\n<ul>\n<li><code>fn<\/code> - {Function} REQUIRED the callback function.<\/li>\n<li><code>timeout<\/code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.<\/li>\n<li><code>until<\/code> - {Function} boolean function executed before each iteration.  Return true to indicate callback completion.<\/li>\n<li><code>iterations<\/code> - {Number} number of times to execute the callback before proceeding to the next callback in the queue. Incompatible with <code>until<\/code>.<\/li>\n<\/ul>", "submodules": [], "classlist": ["Queue"], "filelist": ["Queue.js"], "subdata": {}, "name": "queue"}, "anim": {"description": "Y.Animation Utility.", "submodules": ["anim-color", "anim-curve", "anim-easing", "anim-node-plugin", "anim-scroll", "anim-xy"], "classlist": ["Easing", "Anim"], "filelist": ["anim-color.js", "anim-curve.js", "anim-easing.js", "anim-node-plugin.js", "anim-scroll.js", "anim-xy.js", "anim.js"], "subdata": {"anim-node-plugin": {"name": "Easing", "description": "Binds an Anim instance to a Node instance"}, "anim-scroll": {"name": "Anim", "description": "Adds support for the <code>scroll<\/code> property in <code>to<\/code>\nand <code>from<\/code> attributes."}, "anim-xy": {"name": "Anim", "description": "Adds support for the <code>xy<\/code> property in <code>from<\/code> and \n<code>to<\/code> attributes."}, "anim-color": {"name": "Anim", "description": "Adds support for color properties in <code>to<\/code>\nand <code>from<\/code> attributes."}, "anim-curve": {"name": "Anim", "description": "Adds support for the <code>curve<\/code> property for the <code>to<\/code> \nattribute.  A curve is zero or more control points and an end point."}, "anim-easing": {"name": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}}, "guessedname": "NUM", "guessedtype": "property", "name": "anim"}, "dump": {"description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nIf included, the dump method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~dump"], "filelist": ["dump.js"], "subdata": {}, "name": "dump"}, "dom": {"description": "Adds position and region management functionality to DOM.", "submodules": ["dom-screen", "dom-style", "dom-base", "selector"], "classlist": ["DOM", "Selector"], "filelist": ["dom-screen.js", "dom-style.js", "dom.js", "selector.js"], "subdata": {"dom-base": {"name": "DOM", "description": "Provides DOM helper methods."}, "selector": {"name": "Selector", "description": "Provides helper methods for collecting and filtering DOM elements."}, "dom-style": {"name": "DOM", "description": "Add style management functionality to DOM."}, "dom-screen": {"name": "DOM", "description": "Adds position and region management functionality to DOM."}}, "guessedname": "OFFSET_TOP", "guessedtype": "property", "name": "dom"}, "attribute": {"description": "Managed Attribute Provider", "submodules": [], "classlist": ["Attribute", "State"], "filelist": ["Attribute.js", "State.js"], "subdata": {}, "guessedname": "O", "guessedtype": "property", "name": "attribute"}, "dd": {"description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic.", "submodules": ["dd-constrain", "dd-ddm-base", "dd-ddm-drop", "dd-ddm", "dd-drag", "dd-drop", "dd-proxy"], "classlist": ["DragConstained", "DDM", "Drag", "Drop", "Proxy"], "filelist": ["constrain.js", "ddm-base.js", "ddm-drop.js", "ddm.js", "drag.js", "drop.js", "proxy.js"], "subdata": {"dd-ddm-drop": {"name": "DDM", "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}, "dd-constrain": {"name": "DragConstained", "description": "This class extends the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}, "dd-drop": {"name": "Drop", "description": "This class provides the ability to create a Drop Target."}, "dd-ddm": {"name": "DDM", "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "dd-drag": {"name": "Drag", "description": "This class provides the ability to drag a Node."}, "dd-proxy": {"name": "Proxy", "description": "This class extends dd-drag to allow for creating a proxy drag node, instead of dragging the original node."}, "dd-ddm-base": {"name": "DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable."}}, "name": "dd"}, "yui": {"description": "YUI core", "submodules": ["get", "loader"], "classlist": ["YUI~array", "Lang", "YUI~object", "UA", "YUI", "Get", "Loader"], "filelist": ["yui-array.js", "yui-core.js", "yui-dump.js", "yui-init.js", "yui-lang.js", "yui-later.js", "yui-log.js", "yui-object.js", "yui-ua.js", "yui.js", "get.js", "loader.js"], "subdata": {"loader": {"name": "Loader", "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files."}, "get": {"name": "Get", "description": "Fetches and inserts one or more script or link nodes into the document"}}, "name": "yui"}, "json": {"description": "The JSON Utility provides methods to serialize JavaScript objects into\nJSON strings and parse JavaScript objects from strings containing JSON data.\nThree modules are available for inclusion:\n<ol>\n<li>1. <code>json-parse<\/code> for parsing JSON strings into native JavaScript data<\/li>\n<li>2. <code>json-stringify<\/code> for stringification of JavaScript objects into JSON strings<\/li>\n<li>3. <code>json<\/code> for both parsing and stringification<\/li>\n<\/ol>\nBoth <code>json-parse<\/code> and <code>json-stringify<\/code> create functions in a static JSON class under your YUI instance (e.g. Y.JSON.parse(..)).", "submodules": ["json-parse", "json-stringify"], "classlist": ["JSON"], "filelist": ["json-parse.js", "json-stringify.js"], "subdata": {"json-stringify": {"name": "JSON", "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "json-parse": {"name": "JSON", "description": "Provides Y.JSON.parse method to take JSON strings and return native\nJavaScript objects."}}, "static": "", "guessedname": "JSON", "guessedtype": "property", "name": "json"}, "base": {"description": "Base class support for objects requiring\nmanaged attributes and acting as event targets", "submodules": [], "classlist": ["Base"], "filelist": ["Base.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "base"}, "cookie": {"description": "Utilities for cookie management", "submodules": [], "classlist": ["Cookie"], "filelist": ["Cookie.js"], "subdata": {}, "name": "cookie"}, "dd-plugin": {"description": "This is a simple Drop plugin that can be attached to a Node via the plug method.", "submodules": ["dd-drop-plugin", "dd-plugin"], "classlist": ["DropPlugin", "DragPlugin"], "filelist": ["dd-drop-plugin.js", "dd-plugin.js"], "subdata": {"dd-drop-plugin": {"name": "DropPlugin", "description": "This is a simple Drop plugin that can be attached to a Node via the plug method."}, "dd-plugin": {"name": "DragPlugin", "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}}, "name": "dd-plugin"}, "io": {"description": "HTTP communications module.", "submodules": [], "classlist": ["io"], "filelist": ["io.js"], "subdata": {}, "name": "io"}, "event": {"description": "The YUI event system", "submodules": [], "classlist": ["Event.Handle", "Event.Custom", "Event.Subscriber", "Do", "Do.Method", "Do.Error", "Do.AlterArgs", "Do.AlterReturn", "Event", "Event.Facade", "Event.Target"], "filelist": ["event-custom.js", "event-do.js", "event-dom.js", "event-facade.js", "event-ready.js", "event-target.js", "event.js"], "subdata": {}, "name": "event"}, "substitute": {"description": "String variable substitution and string formatting.\nIf included, the substitute method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~substitute"], "filelist": ["substitute.js"], "subdata": {}, "name": "substitute"}, "oop": {"description": "OOP utils.  If included, the OOP methods are added to the YUI instance", "submodules": [], "classlist": ["YUI~oop"], "filelist": ["oop.js"], "subdata": {}, "name": "oop"}}, "filemap": {"json-parse.js": {"classlist": ["JSON"], "name": "json-parse.js", "module": "json"}, "ddm-base.js": {"classlist": ["DDM"], "name": "ddm-base.js", "module": "dd"}, "node.js": {"classlist": ["Node", "NodeList"], "name": "node.js", "module": "node"}, "get.js": {"classlist": ["Get"], "name": "get.js", "module": "yui"}, "constrain.js": {"classlist": ["DragConstained"], "name": "constrain.js", "module": "dd"}, "dd-plugin.js": {"classlist": ["DragPlugin"], "name": "dd-plugin.js", "module": "dd-plugin"}, "dom-screen.js": {"classlist": [], "name": "dom-screen.js", "module": "dom"}, "yui.js": {"classlist": ["YUI"], "name": "yui.js", "module": "yui"}, "anim-easing.js": {"classlist": ["Easing"], "name": "anim-easing.js", "module": "anim"}, "yui-dump.js": {"classlist": [], "name": "yui-dump.js", "module": "yui"}, "yui-object.js": {"classlist": ["YUI~object"], "name": "yui-object.js", "module": "yui"}, "yui-ua.js": {"classlist": ["UA"], "name": "yui-ua.js", "module": "yui"}, "yui-init.js": {"classlist": [], "name": "yui-init.js", "module": "yui"}, "yui-log.js": {"classlist": [], "name": "yui-log.js", "module": "yui"}, "proxy.js": {"classlist": ["Proxy"], "name": "proxy.js", "module": "dd"}, "dom.js": {"classlist": ["DOM"], "name": "dom.js", "module": "dom"}, "dom-style.js": {"classlist": [], "name": "dom-style.js", "module": "dom"}, "State.js": {"classlist": ["State"], "name": "State.js", "module": "attribute"}, "Cookie.js": {"classlist": ["Cookie"], "name": "Cookie.js", "module": "cookie"}, "drag.js": {"classlist": ["Drag"], "name": "drag.js", "module": "dd"}, "Attribute.js": {"classlist": ["Attribute"], "name": "Attribute.js", "module": "attribute"}, "dump.js": {"classlist": ["YUI~dump"], "name": "dump.js", "module": "dump"}, "event-ready.js": {"classlist": [], "name": "event-ready.js", "module": "event"}, "dd-drop-plugin.js": {"classlist": ["DropPlugin"], "name": "dd-drop-plugin.js", "module": "dd-plugin"}, "event-target.js": {"classlist": ["Event.Target"], "name": "event-target.js", "module": "event"}, "yui-core.js": {"classlist": [], "name": "yui-core.js", "module": "yui"}, "event-custom.js": {"classlist": ["Event.Handle", "Event.Custom", "Event.Subscriber"], "name": "event-custom.js", "module": "event"}, "yui-later.js": {"classlist": [], "name": "yui-later.js", "module": "yui"}, "event-do.js": {"classlist": ["Do", "Do.Method", "Do.Error", "Do.AlterArgs", "Do.AlterReturn"], "name": "event-do.js", "module": "event"}, "anim-node-plugin.js": {"classlist": [], "name": "anim-node-plugin.js", "module": "anim"}, "node-style.js": {"classlist": [], "name": "node-style.js", "module": "node"}, "Base.js": {"classlist": ["Base"], "name": "Base.js", "module": "base"}, "ddm-drop.js": {"classlist": [], "name": "ddm-drop.js", "module": "dd"}, "loader.js": {"classlist": ["Loader"], "name": "loader.js", "module": "yui"}, "yui-array.js": {"classlist": ["YUI~array"], "name": "yui-array.js", "module": "yui"}, "ddm.js": {"classlist": [], "name": "ddm.js", "module": "dd"}, "anim.js": {"classlist": ["Anim"], "name": "anim.js", "module": "anim"}, "anim-scroll.js": {"classlist": [], "name": "anim-scroll.js", "module": "anim"}, "json-stringify.js": {"classlist": [], "name": "json-stringify.js", "module": "json"}, "io.js": {"classlist": ["io"], "name": "io.js", "module": "io"}, "anim-color.js": {"classlist": [], "name": "anim-color.js", "module": "anim"}, "anim-xy.js": {"classlist": [], "name": "anim-xy.js", "module": "anim"}, "yui-lang.js": {"classlist": ["Lang"], "name": "yui-lang.js", "module": "yui"}, "anim-curve.js": {"classlist": [], "name": "anim-curve.js", "module": "anim"}, "substitute.js": {"classlist": ["YUI~substitute"], "name": "substitute.js", "module": "substitute"}, "event-facade.js": {"classlist": ["Event.Facade"], "name": "event-facade.js", "module": "event"}, "event-dom.js": {"classlist": ["Event"], "name": "event-dom.js", "module": "event"}, "Queue.js": {"classlist": ["Queue"], "name": "Queue.js", "module": "queue"}, "event.js": {"classlist": [], "name": "event.js", "module": "event"}, "node-screen.js": {"classlist": [], "name": "node-screen.js", "module": "node"}, "selector.js": {"classlist": ["Selector"], "name": "selector.js", "module": "dom"}, "oop.js": {"classlist": ["YUI~oop"], "name": "oop.js", "module": "oop"}, "drop.js": {"classlist": ["Drop"], "name": "drop.js", "module": "dd"}}}